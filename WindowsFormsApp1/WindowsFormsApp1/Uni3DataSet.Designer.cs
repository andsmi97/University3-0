//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WindowsFormsApp1 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Uni3DataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Uni3DataSet : global::System.Data.DataSet {
        
        private ЗадачаDataTable tableЗадача;
        
        private КомпанияDataTable tableКомпания;
        
        private ОтзывыКомпанииDataTable tableОтзывыКомпании;
        
        private ОтзывыСтудентаDataTable tableОтзывыСтудента;
        
        private ПроблемаDataTable tableПроблема;
        
        private РешениеЗадачиDataTable tableРешениеЗадачи;
        
        private РешениеПроблемыDataTable tableРешениеПроблемы;
        
        private СтудентDataTable tableСтудент;
        
        private global::System.Data.DataRelation relationFK_ОТЗЫВЫКО_КОМПАНИЯО_КОМПАНИЯ;
        
        private global::System.Data.DataRelation relationFK_ОТЗЫВЫКО_СТУДЕНТОТ_СТУДЕНТ;
        
        private global::System.Data.DataRelation relationFK_ОТЗЫВЫСТ_КОМПАНИЯО_КОМПАНИЯ;
        
        private global::System.Data.DataRelation relationFK_ОТЗЫВЫСТ_СТУДЕНТОТ_СТУДЕНТ;
        
        private global::System.Data.DataRelation relationFK_ПРОБЛЕМА_КОМПАНИЯП_КОМПАНИЯ;
        
        private global::System.Data.DataRelation relationFK_РЕШЕНИЕЗ_ЗАДАЧИРЕШ_ЗАДАЧА;
        
        private global::System.Data.DataRelation relationFK_РЕШЕНИЕЗ_СТУДЕНТРЕ_СТУДЕНТ;
        
        private global::System.Data.DataRelation relationFK_РЕШЕНИЕП_ПРОБЛЕМАР_ПРОБЛЕМА;
        
        private global::System.Data.DataRelation relationFK_РЕШЕНИЕП_СТУДЕНТРЕ_СТУДЕНТ;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public Uni3DataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected Uni3DataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Задача"] != null)) {
                    base.Tables.Add(new ЗадачаDataTable(ds.Tables["Задача"]));
                }
                if ((ds.Tables["Компания"] != null)) {
                    base.Tables.Add(new КомпанияDataTable(ds.Tables["Компания"]));
                }
                if ((ds.Tables["ОтзывыКомпании"] != null)) {
                    base.Tables.Add(new ОтзывыКомпанииDataTable(ds.Tables["ОтзывыКомпании"]));
                }
                if ((ds.Tables["ОтзывыСтудента"] != null)) {
                    base.Tables.Add(new ОтзывыСтудентаDataTable(ds.Tables["ОтзывыСтудента"]));
                }
                if ((ds.Tables["Проблема"] != null)) {
                    base.Tables.Add(new ПроблемаDataTable(ds.Tables["Проблема"]));
                }
                if ((ds.Tables["РешениеЗадачи"] != null)) {
                    base.Tables.Add(new РешениеЗадачиDataTable(ds.Tables["РешениеЗадачи"]));
                }
                if ((ds.Tables["РешениеПроблемы"] != null)) {
                    base.Tables.Add(new РешениеПроблемыDataTable(ds.Tables["РешениеПроблемы"]));
                }
                if ((ds.Tables["Студент"] != null)) {
                    base.Tables.Add(new СтудентDataTable(ds.Tables["Студент"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ЗадачаDataTable Задача {
            get {
                return this.tableЗадача;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public КомпанияDataTable Компания {
            get {
                return this.tableКомпания;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ОтзывыКомпанииDataTable ОтзывыКомпании {
            get {
                return this.tableОтзывыКомпании;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ОтзывыСтудентаDataTable ОтзывыСтудента {
            get {
                return this.tableОтзывыСтудента;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ПроблемаDataTable Проблема {
            get {
                return this.tableПроблема;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public РешениеЗадачиDataTable РешениеЗадачи {
            get {
                return this.tableРешениеЗадачи;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public РешениеПроблемыDataTable РешениеПроблемы {
            get {
                return this.tableРешениеПроблемы;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public СтудентDataTable Студент {
            get {
                return this.tableСтудент;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            Uni3DataSet cln = ((Uni3DataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Задача"] != null)) {
                    base.Tables.Add(new ЗадачаDataTable(ds.Tables["Задача"]));
                }
                if ((ds.Tables["Компания"] != null)) {
                    base.Tables.Add(new КомпанияDataTable(ds.Tables["Компания"]));
                }
                if ((ds.Tables["ОтзывыКомпании"] != null)) {
                    base.Tables.Add(new ОтзывыКомпанииDataTable(ds.Tables["ОтзывыКомпании"]));
                }
                if ((ds.Tables["ОтзывыСтудента"] != null)) {
                    base.Tables.Add(new ОтзывыСтудентаDataTable(ds.Tables["ОтзывыСтудента"]));
                }
                if ((ds.Tables["Проблема"] != null)) {
                    base.Tables.Add(new ПроблемаDataTable(ds.Tables["Проблема"]));
                }
                if ((ds.Tables["РешениеЗадачи"] != null)) {
                    base.Tables.Add(new РешениеЗадачиDataTable(ds.Tables["РешениеЗадачи"]));
                }
                if ((ds.Tables["РешениеПроблемы"] != null)) {
                    base.Tables.Add(new РешениеПроблемыDataTable(ds.Tables["РешениеПроблемы"]));
                }
                if ((ds.Tables["Студент"] != null)) {
                    base.Tables.Add(new СтудентDataTable(ds.Tables["Студент"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableЗадача = ((ЗадачаDataTable)(base.Tables["Задача"]));
            if ((initTable == true)) {
                if ((this.tableЗадача != null)) {
                    this.tableЗадача.InitVars();
                }
            }
            this.tableКомпания = ((КомпанияDataTable)(base.Tables["Компания"]));
            if ((initTable == true)) {
                if ((this.tableКомпания != null)) {
                    this.tableКомпания.InitVars();
                }
            }
            this.tableОтзывыКомпании = ((ОтзывыКомпанииDataTable)(base.Tables["ОтзывыКомпании"]));
            if ((initTable == true)) {
                if ((this.tableОтзывыКомпании != null)) {
                    this.tableОтзывыКомпании.InitVars();
                }
            }
            this.tableОтзывыСтудента = ((ОтзывыСтудентаDataTable)(base.Tables["ОтзывыСтудента"]));
            if ((initTable == true)) {
                if ((this.tableОтзывыСтудента != null)) {
                    this.tableОтзывыСтудента.InitVars();
                }
            }
            this.tableПроблема = ((ПроблемаDataTable)(base.Tables["Проблема"]));
            if ((initTable == true)) {
                if ((this.tableПроблема != null)) {
                    this.tableПроблема.InitVars();
                }
            }
            this.tableРешениеЗадачи = ((РешениеЗадачиDataTable)(base.Tables["РешениеЗадачи"]));
            if ((initTable == true)) {
                if ((this.tableРешениеЗадачи != null)) {
                    this.tableРешениеЗадачи.InitVars();
                }
            }
            this.tableРешениеПроблемы = ((РешениеПроблемыDataTable)(base.Tables["РешениеПроблемы"]));
            if ((initTable == true)) {
                if ((this.tableРешениеПроблемы != null)) {
                    this.tableРешениеПроблемы.InitVars();
                }
            }
            this.tableСтудент = ((СтудентDataTable)(base.Tables["Студент"]));
            if ((initTable == true)) {
                if ((this.tableСтудент != null)) {
                    this.tableСтудент.InitVars();
                }
            }
            this.relationFK_ОТЗЫВЫКО_КОМПАНИЯО_КОМПАНИЯ = this.Relations["FK_ОТЗЫВЫКО_КОМПАНИЯО_КОМПАНИЯ"];
            this.relationFK_ОТЗЫВЫКО_СТУДЕНТОТ_СТУДЕНТ = this.Relations["FK_ОТЗЫВЫКО_СТУДЕНТОТ_СТУДЕНТ"];
            this.relationFK_ОТЗЫВЫСТ_КОМПАНИЯО_КОМПАНИЯ = this.Relations["FK_ОТЗЫВЫСТ_КОМПАНИЯО_КОМПАНИЯ"];
            this.relationFK_ОТЗЫВЫСТ_СТУДЕНТОТ_СТУДЕНТ = this.Relations["FK_ОТЗЫВЫСТ_СТУДЕНТОТ_СТУДЕНТ"];
            this.relationFK_ПРОБЛЕМА_КОМПАНИЯП_КОМПАНИЯ = this.Relations["FK_ПРОБЛЕМА_КОМПАНИЯП_КОМПАНИЯ"];
            this.relationFK_РЕШЕНИЕЗ_ЗАДАЧИРЕШ_ЗАДАЧА = this.Relations["FK_РЕШЕНИЕЗ_ЗАДАЧИРЕШ_ЗАДАЧА"];
            this.relationFK_РЕШЕНИЕЗ_СТУДЕНТРЕ_СТУДЕНТ = this.Relations["FK_РЕШЕНИЕЗ_СТУДЕНТРЕ_СТУДЕНТ"];
            this.relationFK_РЕШЕНИЕП_ПРОБЛЕМАР_ПРОБЛЕМА = this.Relations["FK_РЕШЕНИЕП_ПРОБЛЕМАР_ПРОБЛЕМА"];
            this.relationFK_РЕШЕНИЕП_СТУДЕНТРЕ_СТУДЕНТ = this.Relations["FK_РЕШЕНИЕП_СТУДЕНТРЕ_СТУДЕНТ"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitClass() {
            this.DataSetName = "Uni3DataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Uni3DataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableЗадача = new ЗадачаDataTable();
            base.Tables.Add(this.tableЗадача);
            this.tableКомпания = new КомпанияDataTable();
            base.Tables.Add(this.tableКомпания);
            this.tableОтзывыКомпании = new ОтзывыКомпанииDataTable();
            base.Tables.Add(this.tableОтзывыКомпании);
            this.tableОтзывыСтудента = new ОтзывыСтудентаDataTable();
            base.Tables.Add(this.tableОтзывыСтудента);
            this.tableПроблема = new ПроблемаDataTable();
            base.Tables.Add(this.tableПроблема);
            this.tableРешениеЗадачи = new РешениеЗадачиDataTable();
            base.Tables.Add(this.tableРешениеЗадачи);
            this.tableРешениеПроблемы = new РешениеПроблемыDataTable();
            base.Tables.Add(this.tableРешениеПроблемы);
            this.tableСтудент = new СтудентDataTable();
            base.Tables.Add(this.tableСтудент);
            this.relationFK_ОТЗЫВЫКО_КОМПАНИЯО_КОМПАНИЯ = new global::System.Data.DataRelation("FK_ОТЗЫВЫКО_КОМПАНИЯО_КОМПАНИЯ", new global::System.Data.DataColumn[] {
                        this.tableКомпания.ИД_компанииColumn}, new global::System.Data.DataColumn[] {
                        this.tableОтзывыКомпании.ИД_компанииColumn}, false);
            this.Relations.Add(this.relationFK_ОТЗЫВЫКО_КОМПАНИЯО_КОМПАНИЯ);
            this.relationFK_ОТЗЫВЫКО_СТУДЕНТОТ_СТУДЕНТ = new global::System.Data.DataRelation("FK_ОТЗЫВЫКО_СТУДЕНТОТ_СТУДЕНТ", new global::System.Data.DataColumn[] {
                        this.tableСтудент.ИД_СтудентаColumn}, new global::System.Data.DataColumn[] {
                        this.tableОтзывыКомпании.ИД_СтудентаColumn}, false);
            this.Relations.Add(this.relationFK_ОТЗЫВЫКО_СТУДЕНТОТ_СТУДЕНТ);
            this.relationFK_ОТЗЫВЫСТ_КОМПАНИЯО_КОМПАНИЯ = new global::System.Data.DataRelation("FK_ОТЗЫВЫСТ_КОМПАНИЯО_КОМПАНИЯ", new global::System.Data.DataColumn[] {
                        this.tableКомпания.ИД_компанииColumn}, new global::System.Data.DataColumn[] {
                        this.tableОтзывыСтудента.ИД_компанииColumn}, false);
            this.Relations.Add(this.relationFK_ОТЗЫВЫСТ_КОМПАНИЯО_КОМПАНИЯ);
            this.relationFK_ОТЗЫВЫСТ_СТУДЕНТОТ_СТУДЕНТ = new global::System.Data.DataRelation("FK_ОТЗЫВЫСТ_СТУДЕНТОТ_СТУДЕНТ", new global::System.Data.DataColumn[] {
                        this.tableСтудент.ИД_СтудентаColumn}, new global::System.Data.DataColumn[] {
                        this.tableОтзывыСтудента.ИД_СтудентаColumn}, false);
            this.Relations.Add(this.relationFK_ОТЗЫВЫСТ_СТУДЕНТОТ_СТУДЕНТ);
            this.relationFK_ПРОБЛЕМА_КОМПАНИЯП_КОМПАНИЯ = new global::System.Data.DataRelation("FK_ПРОБЛЕМА_КОМПАНИЯП_КОМПАНИЯ", new global::System.Data.DataColumn[] {
                        this.tableКомпания.ИД_компанииColumn}, new global::System.Data.DataColumn[] {
                        this.tableПроблема.ИД_компанииColumn}, false);
            this.Relations.Add(this.relationFK_ПРОБЛЕМА_КОМПАНИЯП_КОМПАНИЯ);
            this.relationFK_РЕШЕНИЕЗ_ЗАДАЧИРЕШ_ЗАДАЧА = new global::System.Data.DataRelation("FK_РЕШЕНИЕЗ_ЗАДАЧИРЕШ_ЗАДАЧА", new global::System.Data.DataColumn[] {
                        this.tableЗадача.ИД_задачиColumn}, new global::System.Data.DataColumn[] {
                        this.tableРешениеЗадачи.ИД_задачиColumn}, false);
            this.Relations.Add(this.relationFK_РЕШЕНИЕЗ_ЗАДАЧИРЕШ_ЗАДАЧА);
            this.relationFK_РЕШЕНИЕЗ_СТУДЕНТРЕ_СТУДЕНТ = new global::System.Data.DataRelation("FK_РЕШЕНИЕЗ_СТУДЕНТРЕ_СТУДЕНТ", new global::System.Data.DataColumn[] {
                        this.tableСтудент.ИД_СтудентаColumn}, new global::System.Data.DataColumn[] {
                        this.tableРешениеЗадачи.ИД_СтудентаColumn}, false);
            this.Relations.Add(this.relationFK_РЕШЕНИЕЗ_СТУДЕНТРЕ_СТУДЕНТ);
            this.relationFK_РЕШЕНИЕП_ПРОБЛЕМАР_ПРОБЛЕМА = new global::System.Data.DataRelation("FK_РЕШЕНИЕП_ПРОБЛЕМАР_ПРОБЛЕМА", new global::System.Data.DataColumn[] {
                        this.tableПроблема.ИД_ПроблемыColumn}, new global::System.Data.DataColumn[] {
                        this.tableРешениеПроблемы.ИД_ПроблемыColumn}, false);
            this.Relations.Add(this.relationFK_РЕШЕНИЕП_ПРОБЛЕМАР_ПРОБЛЕМА);
            this.relationFK_РЕШЕНИЕП_СТУДЕНТРЕ_СТУДЕНТ = new global::System.Data.DataRelation("FK_РЕШЕНИЕП_СТУДЕНТРЕ_СТУДЕНТ", new global::System.Data.DataColumn[] {
                        this.tableСтудент.ИД_СтудентаColumn}, new global::System.Data.DataColumn[] {
                        this.tableРешениеПроблемы.ИД_СтудентаColumn}, false);
            this.Relations.Add(this.relationFK_РЕШЕНИЕП_СТУДЕНТРЕ_СТУДЕНТ);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeЗадача() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeКомпания() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeОтзывыКомпании() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeОтзывыСтудента() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeПроблема() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeРешениеЗадачи() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeРешениеПроблемы() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeСтудент() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Uni3DataSet ds = new Uni3DataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void ЗадачаRowChangeEventHandler(object sender, ЗадачаRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void КомпанияRowChangeEventHandler(object sender, КомпанияRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void ОтзывыКомпанииRowChangeEventHandler(object sender, ОтзывыКомпанииRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void ОтзывыСтудентаRowChangeEventHandler(object sender, ОтзывыСтудентаRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void ПроблемаRowChangeEventHandler(object sender, ПроблемаRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void РешениеЗадачиRowChangeEventHandler(object sender, РешениеЗадачиRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void РешениеПроблемыRowChangeEventHandler(object sender, РешениеПроблемыRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void СтудентRowChangeEventHandler(object sender, СтудентRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ЗадачаDataTable : global::System.Data.TypedTableBase<ЗадачаRow> {
            
            private global::System.Data.DataColumn columnИД_задачи;
            
            private global::System.Data.DataColumn columnИД_компании;
            
            private global::System.Data.DataColumn columnНаправлениеЗадачи;
            
            private global::System.Data.DataColumn columnСтатусЗадачи;
            
            private global::System.Data.DataColumn columnЦенаЗадачи;
            
            private global::System.Data.DataColumn columnОписаниеЗадачи;
            
            private global::System.Data.DataColumn columnНазваниеЗадачи;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ЗадачаDataTable() {
                this.TableName = "Задача";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal ЗадачаDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected ЗадачаDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_задачиColumn {
                get {
                    return this.columnИД_задачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_компанииColumn {
                get {
                    return this.columnИД_компании;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn НаправлениеЗадачиColumn {
                get {
                    return this.columnНаправлениеЗадачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn СтатусЗадачиColumn {
                get {
                    return this.columnСтатусЗадачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ЦенаЗадачиColumn {
                get {
                    return this.columnЦенаЗадачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ОписаниеЗадачиColumn {
                get {
                    return this.columnОписаниеЗадачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn НазваниеЗадачиColumn {
                get {
                    return this.columnНазваниеЗадачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ЗадачаRow this[int index] {
                get {
                    return ((ЗадачаRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ЗадачаRowChangeEventHandler ЗадачаRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ЗадачаRowChangeEventHandler ЗадачаRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ЗадачаRowChangeEventHandler ЗадачаRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ЗадачаRowChangeEventHandler ЗадачаRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddЗадачаRow(ЗадачаRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ЗадачаRow AddЗадачаRow(decimal ИД_компании, string НаправлениеЗадачи, bool СтатусЗадачи, double ЦенаЗадачи, string ОписаниеЗадачи, string НазваниеЗадачи) {
                ЗадачаRow rowЗадачаRow = ((ЗадачаRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ИД_компании,
                        НаправлениеЗадачи,
                        СтатусЗадачи,
                        ЦенаЗадачи,
                        ОписаниеЗадачи,
                        НазваниеЗадачи};
                rowЗадачаRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowЗадачаRow);
                return rowЗадачаRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ЗадачаRow FindByИД_задачи(decimal ИД_задачи) {
                return ((ЗадачаRow)(this.Rows.Find(new object[] {
                            ИД_задачи})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ЗадачаDataTable cln = ((ЗадачаDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ЗадачаDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars() {
                this.columnИД_задачи = base.Columns["ИД_задачи"];
                this.columnИД_компании = base.Columns["ИД_компании"];
                this.columnНаправлениеЗадачи = base.Columns["НаправлениеЗадачи"];
                this.columnСтатусЗадачи = base.Columns["СтатусЗадачи"];
                this.columnЦенаЗадачи = base.Columns["ЦенаЗадачи"];
                this.columnОписаниеЗадачи = base.Columns["ОписаниеЗадачи"];
                this.columnНазваниеЗадачи = base.Columns["НазваниеЗадачи"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass() {
                this.columnИД_задачи = new global::System.Data.DataColumn("ИД_задачи", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_задачи);
                this.columnИД_компании = new global::System.Data.DataColumn("ИД_компании", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_компании);
                this.columnНаправлениеЗадачи = new global::System.Data.DataColumn("НаправлениеЗадачи", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаправлениеЗадачи);
                this.columnСтатусЗадачи = new global::System.Data.DataColumn("СтатусЗадачи", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтатусЗадачи);
                this.columnЦенаЗадачи = new global::System.Data.DataColumn("ЦенаЗадачи", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЦенаЗадачи);
                this.columnОписаниеЗадачи = new global::System.Data.DataColumn("ОписаниеЗадачи", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеЗадачи);
                this.columnНазваниеЗадачи = new global::System.Data.DataColumn("НазваниеЗадачи", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНазваниеЗадачи);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnИД_задачи}, true));
                this.columnИД_задачи.AutoIncrement = true;
                this.columnИД_задачи.AutoIncrementSeed = -1;
                this.columnИД_задачи.AutoIncrementStep = -1;
                this.columnИД_задачи.AllowDBNull = false;
                this.columnИД_задачи.ReadOnly = true;
                this.columnИД_задачи.Unique = true;
                this.columnИД_компании.AllowDBNull = false;
                this.columnНаправлениеЗадачи.AllowDBNull = false;
                this.columnНаправлениеЗадачи.MaxLength = 250;
                this.columnСтатусЗадачи.AllowDBNull = false;
                this.columnЦенаЗадачи.AllowDBNull = false;
                this.columnОписаниеЗадачи.AllowDBNull = false;
                this.columnОписаниеЗадачи.MaxLength = 5000;
                this.columnНазваниеЗадачи.AllowDBNull = false;
                this.columnНазваниеЗадачи.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ЗадачаRow NewЗадачаRow() {
                return ((ЗадачаRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ЗадачаRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ЗадачаRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ЗадачаRowChanged != null)) {
                    this.ЗадачаRowChanged(this, new ЗадачаRowChangeEvent(((ЗадачаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ЗадачаRowChanging != null)) {
                    this.ЗадачаRowChanging(this, new ЗадачаRowChangeEvent(((ЗадачаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ЗадачаRowDeleted != null)) {
                    this.ЗадачаRowDeleted(this, new ЗадачаRowChangeEvent(((ЗадачаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ЗадачаRowDeleting != null)) {
                    this.ЗадачаRowDeleting(this, new ЗадачаRowChangeEvent(((ЗадачаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveЗадачаRow(ЗадачаRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Uni3DataSet ds = new Uni3DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ЗадачаDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class КомпанияDataTable : global::System.Data.TypedTableBase<КомпанияRow> {
            
            private global::System.Data.DataColumn columnИД_компании;
            
            private global::System.Data.DataColumn columnНазваниеКомпании;
            
            private global::System.Data.DataColumn columnСфераДеятельности;
            
            private global::System.Data.DataColumn columnТелефонКомпании;
            
            private global::System.Data.DataColumn columnEmailКомпании;
            
            private global::System.Data.DataColumn columnОписаниеКомпании;
            
            private global::System.Data.DataColumn columnЛогинКомпании;
            
            private global::System.Data.DataColumn columnПарольКомпании;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public КомпанияDataTable() {
                this.TableName = "Компания";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal КомпанияDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected КомпанияDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_компанииColumn {
                get {
                    return this.columnИД_компании;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn НазваниеКомпанииColumn {
                get {
                    return this.columnНазваниеКомпании;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn СфераДеятельностиColumn {
                get {
                    return this.columnСфераДеятельности;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ТелефонКомпанииColumn {
                get {
                    return this.columnТелефонКомпании;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn EmailКомпанииColumn {
                get {
                    return this.columnEmailКомпании;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ОписаниеКомпанииColumn {
                get {
                    return this.columnОписаниеКомпании;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ЛогинКомпанииColumn {
                get {
                    return this.columnЛогинКомпании;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ПарольКомпанииColumn {
                get {
                    return this.columnПарольКомпании;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public КомпанияRow this[int index] {
                get {
                    return ((КомпанияRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event КомпанияRowChangeEventHandler КомпанияRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event КомпанияRowChangeEventHandler КомпанияRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event КомпанияRowChangeEventHandler КомпанияRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event КомпанияRowChangeEventHandler КомпанияRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddКомпанияRow(КомпанияRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public КомпанияRow AddКомпанияRow(string НазваниеКомпании, string СфераДеятельности, string ТелефонКомпании, string EmailКомпании, string ОписаниеКомпании, string ЛогинКомпании, string ПарольКомпании) {
                КомпанияRow rowКомпанияRow = ((КомпанияRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        НазваниеКомпании,
                        СфераДеятельности,
                        ТелефонКомпании,
                        EmailКомпании,
                        ОписаниеКомпании,
                        ЛогинКомпании,
                        ПарольКомпании};
                rowКомпанияRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowКомпанияRow);
                return rowКомпанияRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public КомпанияRow FindByИД_компании(decimal ИД_компании) {
                return ((КомпанияRow)(this.Rows.Find(new object[] {
                            ИД_компании})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                КомпанияDataTable cln = ((КомпанияDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new КомпанияDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars() {
                this.columnИД_компании = base.Columns["ИД_компании"];
                this.columnНазваниеКомпании = base.Columns["НазваниеКомпании"];
                this.columnСфераДеятельности = base.Columns["СфераДеятельности"];
                this.columnТелефонКомпании = base.Columns["ТелефонКомпании"];
                this.columnEmailКомпании = base.Columns["EmailКомпании"];
                this.columnОписаниеКомпании = base.Columns["ОписаниеКомпании"];
                this.columnЛогинКомпании = base.Columns["ЛогинКомпании"];
                this.columnПарольКомпании = base.Columns["ПарольКомпании"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass() {
                this.columnИД_компании = new global::System.Data.DataColumn("ИД_компании", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_компании);
                this.columnНазваниеКомпании = new global::System.Data.DataColumn("НазваниеКомпании", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНазваниеКомпании);
                this.columnСфераДеятельности = new global::System.Data.DataColumn("СфераДеятельности", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСфераДеятельности);
                this.columnТелефонКомпании = new global::System.Data.DataColumn("ТелефонКомпании", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТелефонКомпании);
                this.columnEmailКомпании = new global::System.Data.DataColumn("EmailКомпании", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailКомпании);
                this.columnОписаниеКомпании = new global::System.Data.DataColumn("ОписаниеКомпании", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеКомпании);
                this.columnЛогинКомпании = new global::System.Data.DataColumn("ЛогинКомпании", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЛогинКомпании);
                this.columnПарольКомпании = new global::System.Data.DataColumn("ПарольКомпании", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnПарольКомпании);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnИД_компании}, true));
                this.columnИД_компании.AutoIncrement = true;
                this.columnИД_компании.AutoIncrementSeed = -1;
                this.columnИД_компании.AutoIncrementStep = -1;
                this.columnИД_компании.AllowDBNull = false;
                this.columnИД_компании.ReadOnly = true;
                this.columnИД_компании.Unique = true;
                this.columnНазваниеКомпании.AllowDBNull = false;
                this.columnНазваниеКомпании.MaxLength = 100;
                this.columnСфераДеятельности.AllowDBNull = false;
                this.columnСфераДеятельности.MaxLength = 100;
                this.columnТелефонКомпании.AllowDBNull = false;
                this.columnТелефонКомпании.MaxLength = 20;
                this.columnEmailКомпании.AllowDBNull = false;
                this.columnEmailКомпании.MaxLength = 70;
                this.columnОписаниеКомпании.MaxLength = 1000;
                this.columnЛогинКомпании.AllowDBNull = false;
                this.columnЛогинКомпании.MaxLength = 100;
                this.columnПарольКомпании.AllowDBNull = false;
                this.columnПарольКомпании.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public КомпанияRow NewКомпанияRow() {
                return ((КомпанияRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new КомпанияRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(КомпанияRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.КомпанияRowChanged != null)) {
                    this.КомпанияRowChanged(this, new КомпанияRowChangeEvent(((КомпанияRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.КомпанияRowChanging != null)) {
                    this.КомпанияRowChanging(this, new КомпанияRowChangeEvent(((КомпанияRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.КомпанияRowDeleted != null)) {
                    this.КомпанияRowDeleted(this, new КомпанияRowChangeEvent(((КомпанияRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.КомпанияRowDeleting != null)) {
                    this.КомпанияRowDeleting(this, new КомпанияRowChangeEvent(((КомпанияRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveКомпанияRow(КомпанияRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Uni3DataSet ds = new Uni3DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "КомпанияDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ОтзывыКомпанииDataTable : global::System.Data.TypedTableBase<ОтзывыКомпанииRow> {
            
            private global::System.Data.DataColumn columnИД_ОтзываКомпании;
            
            private global::System.Data.DataColumn columnИД_компании;
            
            private global::System.Data.DataColumn columnИД_Студента;
            
            private global::System.Data.DataColumn columnОтзывКомпании;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыКомпанииDataTable() {
                this.TableName = "ОтзывыКомпании";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal ОтзывыКомпанииDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected ОтзывыКомпанииDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_ОтзываКомпанииColumn {
                get {
                    return this.columnИД_ОтзываКомпании;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_компанииColumn {
                get {
                    return this.columnИД_компании;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_СтудентаColumn {
                get {
                    return this.columnИД_Студента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ОтзывКомпанииColumn {
                get {
                    return this.columnОтзывКомпании;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыКомпанииRow this[int index] {
                get {
                    return ((ОтзывыКомпанииRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ОтзывыКомпанииRowChangeEventHandler ОтзывыКомпанииRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ОтзывыКомпанииRowChangeEventHandler ОтзывыКомпанииRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ОтзывыКомпанииRowChangeEventHandler ОтзывыКомпанииRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ОтзывыКомпанииRowChangeEventHandler ОтзывыКомпанииRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddОтзывыКомпанииRow(ОтзывыКомпанииRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыКомпанииRow AddОтзывыКомпанииRow(КомпанияRow parentКомпанияRowByFK_ОТЗЫВЫКО_КОМПАНИЯО_КОМПАНИЯ, СтудентRow parentСтудентRowByFK_ОТЗЫВЫКО_СТУДЕНТОТ_СТУДЕНТ, string ОтзывКомпании) {
                ОтзывыКомпанииRow rowОтзывыКомпанииRow = ((ОтзывыКомпанииRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        ОтзывКомпании};
                if ((parentКомпанияRowByFK_ОТЗЫВЫКО_КОМПАНИЯО_КОМПАНИЯ != null)) {
                    columnValuesArray[1] = parentКомпанияRowByFK_ОТЗЫВЫКО_КОМПАНИЯО_КОМПАНИЯ[0];
                }
                if ((parentСтудентRowByFK_ОТЗЫВЫКО_СТУДЕНТОТ_СТУДЕНТ != null)) {
                    columnValuesArray[2] = parentСтудентRowByFK_ОТЗЫВЫКО_СТУДЕНТОТ_СТУДЕНТ[0];
                }
                rowОтзывыКомпанииRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowОтзывыКомпанииRow);
                return rowОтзывыКомпанииRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыКомпанииRow FindByИД_ОтзываКомпании(decimal ИД_ОтзываКомпании) {
                return ((ОтзывыКомпанииRow)(this.Rows.Find(new object[] {
                            ИД_ОтзываКомпании})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ОтзывыКомпанииDataTable cln = ((ОтзывыКомпанииDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ОтзывыКомпанииDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars() {
                this.columnИД_ОтзываКомпании = base.Columns["ИД_ОтзываКомпании"];
                this.columnИД_компании = base.Columns["ИД_компании"];
                this.columnИД_Студента = base.Columns["ИД_Студента"];
                this.columnОтзывКомпании = base.Columns["ОтзывКомпании"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass() {
                this.columnИД_ОтзываКомпании = new global::System.Data.DataColumn("ИД_ОтзываКомпании", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_ОтзываКомпании);
                this.columnИД_компании = new global::System.Data.DataColumn("ИД_компании", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_компании);
                this.columnИД_Студента = new global::System.Data.DataColumn("ИД_Студента", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_Студента);
                this.columnОтзывКомпании = new global::System.Data.DataColumn("ОтзывКомпании", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОтзывКомпании);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnИД_ОтзываКомпании}, true));
                this.columnИД_ОтзываКомпании.AutoIncrement = true;
                this.columnИД_ОтзываКомпании.AutoIncrementSeed = -1;
                this.columnИД_ОтзываКомпании.AutoIncrementStep = -1;
                this.columnИД_ОтзываКомпании.AllowDBNull = false;
                this.columnИД_ОтзываКомпании.ReadOnly = true;
                this.columnИД_ОтзываКомпании.Unique = true;
                this.columnИД_Студента.AllowDBNull = false;
                this.columnОтзывКомпании.AllowDBNull = false;
                this.columnОтзывКомпании.MaxLength = 5000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыКомпанииRow NewОтзывыКомпанииRow() {
                return ((ОтзывыКомпанииRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ОтзывыКомпанииRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ОтзывыКомпанииRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ОтзывыКомпанииRowChanged != null)) {
                    this.ОтзывыКомпанииRowChanged(this, new ОтзывыКомпанииRowChangeEvent(((ОтзывыКомпанииRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ОтзывыКомпанииRowChanging != null)) {
                    this.ОтзывыКомпанииRowChanging(this, new ОтзывыКомпанииRowChangeEvent(((ОтзывыКомпанииRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ОтзывыКомпанииRowDeleted != null)) {
                    this.ОтзывыКомпанииRowDeleted(this, new ОтзывыКомпанииRowChangeEvent(((ОтзывыКомпанииRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ОтзывыКомпанииRowDeleting != null)) {
                    this.ОтзывыКомпанииRowDeleting(this, new ОтзывыКомпанииRowChangeEvent(((ОтзывыКомпанииRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveОтзывыКомпанииRow(ОтзывыКомпанииRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Uni3DataSet ds = new Uni3DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ОтзывыКомпанииDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ОтзывыСтудентаDataTable : global::System.Data.TypedTableBase<ОтзывыСтудентаRow> {
            
            private global::System.Data.DataColumn columnИД_ОтзываСтудента;
            
            private global::System.Data.DataColumn columnИД_Студента;
            
            private global::System.Data.DataColumn columnИД_компании;
            
            private global::System.Data.DataColumn columnОтзывСтудента;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыСтудентаDataTable() {
                this.TableName = "ОтзывыСтудента";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal ОтзывыСтудентаDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected ОтзывыСтудентаDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_ОтзываСтудентаColumn {
                get {
                    return this.columnИД_ОтзываСтудента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_СтудентаColumn {
                get {
                    return this.columnИД_Студента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_компанииColumn {
                get {
                    return this.columnИД_компании;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ОтзывСтудентаColumn {
                get {
                    return this.columnОтзывСтудента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыСтудентаRow this[int index] {
                get {
                    return ((ОтзывыСтудентаRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ОтзывыСтудентаRowChangeEventHandler ОтзывыСтудентаRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ОтзывыСтудентаRowChangeEventHandler ОтзывыСтудентаRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ОтзывыСтудентаRowChangeEventHandler ОтзывыСтудентаRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ОтзывыСтудентаRowChangeEventHandler ОтзывыСтудентаRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddОтзывыСтудентаRow(ОтзывыСтудентаRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыСтудентаRow AddОтзывыСтудентаRow(СтудентRow parentСтудентRowByFK_ОТЗЫВЫСТ_СТУДЕНТОТ_СТУДЕНТ, КомпанияRow parentКомпанияRowByFK_ОТЗЫВЫСТ_КОМПАНИЯО_КОМПАНИЯ, string ОтзывСтудента) {
                ОтзывыСтудентаRow rowОтзывыСтудентаRow = ((ОтзывыСтудентаRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        ОтзывСтудента};
                if ((parentСтудентRowByFK_ОТЗЫВЫСТ_СТУДЕНТОТ_СТУДЕНТ != null)) {
                    columnValuesArray[1] = parentСтудентRowByFK_ОТЗЫВЫСТ_СТУДЕНТОТ_СТУДЕНТ[0];
                }
                if ((parentКомпанияRowByFK_ОТЗЫВЫСТ_КОМПАНИЯО_КОМПАНИЯ != null)) {
                    columnValuesArray[2] = parentКомпанияRowByFK_ОТЗЫВЫСТ_КОМПАНИЯО_КОМПАНИЯ[0];
                }
                rowОтзывыСтудентаRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowОтзывыСтудентаRow);
                return rowОтзывыСтудентаRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыСтудентаRow FindByИД_ОтзываСтудента(decimal ИД_ОтзываСтудента) {
                return ((ОтзывыСтудентаRow)(this.Rows.Find(new object[] {
                            ИД_ОтзываСтудента})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ОтзывыСтудентаDataTable cln = ((ОтзывыСтудентаDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ОтзывыСтудентаDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars() {
                this.columnИД_ОтзываСтудента = base.Columns["ИД_ОтзываСтудента"];
                this.columnИД_Студента = base.Columns["ИД_Студента"];
                this.columnИД_компании = base.Columns["ИД_компании"];
                this.columnОтзывСтудента = base.Columns["ОтзывСтудента"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass() {
                this.columnИД_ОтзываСтудента = new global::System.Data.DataColumn("ИД_ОтзываСтудента", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_ОтзываСтудента);
                this.columnИД_Студента = new global::System.Data.DataColumn("ИД_Студента", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_Студента);
                this.columnИД_компании = new global::System.Data.DataColumn("ИД_компании", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_компании);
                this.columnОтзывСтудента = new global::System.Data.DataColumn("ОтзывСтудента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОтзывСтудента);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnИД_ОтзываСтудента}, true));
                this.columnИД_ОтзываСтудента.AutoIncrement = true;
                this.columnИД_ОтзываСтудента.AutoIncrementSeed = -1;
                this.columnИД_ОтзываСтудента.AutoIncrementStep = -1;
                this.columnИД_ОтзываСтудента.AllowDBNull = false;
                this.columnИД_ОтзываСтудента.ReadOnly = true;
                this.columnИД_ОтзываСтудента.Unique = true;
                this.columnИД_Студента.AllowDBNull = false;
                this.columnИД_компании.AllowDBNull = false;
                this.columnОтзывСтудента.AllowDBNull = false;
                this.columnОтзывСтудента.MaxLength = 5000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыСтудентаRow NewОтзывыСтудентаRow() {
                return ((ОтзывыСтудентаRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ОтзывыСтудентаRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ОтзывыСтудентаRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ОтзывыСтудентаRowChanged != null)) {
                    this.ОтзывыСтудентаRowChanged(this, new ОтзывыСтудентаRowChangeEvent(((ОтзывыСтудентаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ОтзывыСтудентаRowChanging != null)) {
                    this.ОтзывыСтудентаRowChanging(this, new ОтзывыСтудентаRowChangeEvent(((ОтзывыСтудентаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ОтзывыСтудентаRowDeleted != null)) {
                    this.ОтзывыСтудентаRowDeleted(this, new ОтзывыСтудентаRowChangeEvent(((ОтзывыСтудентаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ОтзывыСтудентаRowDeleting != null)) {
                    this.ОтзывыСтудентаRowDeleting(this, new ОтзывыСтудентаRowChangeEvent(((ОтзывыСтудентаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveОтзывыСтудентаRow(ОтзывыСтудентаRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Uni3DataSet ds = new Uni3DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ОтзывыСтудентаDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ПроблемаDataTable : global::System.Data.TypedTableBase<ПроблемаRow> {
            
            private global::System.Data.DataColumn columnИД_Проблемы;
            
            private global::System.Data.DataColumn columnИД_компании;
            
            private global::System.Data.DataColumn columnНаправлениеПроблемы;
            
            private global::System.Data.DataColumn columnЦенаПроблемы;
            
            private global::System.Data.DataColumn columnСтатусПроблемы;
            
            private global::System.Data.DataColumn columnОписаниеПроблемы;
            
            private global::System.Data.DataColumn columnНазваниеПроблемы;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ПроблемаDataTable() {
                this.TableName = "Проблема";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal ПроблемаDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected ПроблемаDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_ПроблемыColumn {
                get {
                    return this.columnИД_Проблемы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_компанииColumn {
                get {
                    return this.columnИД_компании;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn НаправлениеПроблемыColumn {
                get {
                    return this.columnНаправлениеПроблемы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ЦенаПроблемыColumn {
                get {
                    return this.columnЦенаПроблемы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn СтатусПроблемыColumn {
                get {
                    return this.columnСтатусПроблемы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ОписаниеПроблемыColumn {
                get {
                    return this.columnОписаниеПроблемы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn НазваниеПроблемыColumn {
                get {
                    return this.columnНазваниеПроблемы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ПроблемаRow this[int index] {
                get {
                    return ((ПроблемаRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ПроблемаRowChangeEventHandler ПроблемаRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ПроблемаRowChangeEventHandler ПроблемаRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ПроблемаRowChangeEventHandler ПроблемаRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event ПроблемаRowChangeEventHandler ПроблемаRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddПроблемаRow(ПроблемаRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ПроблемаRow AddПроблемаRow(КомпанияRow parentКомпанияRowByFK_ПРОБЛЕМА_КОМПАНИЯП_КОМПАНИЯ, string НаправлениеПроблемы, double ЦенаПроблемы, bool СтатусПроблемы, string ОписаниеПроблемы, string НазваниеПроблемы) {
                ПроблемаRow rowПроблемаRow = ((ПроблемаRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        НаправлениеПроблемы,
                        ЦенаПроблемы,
                        СтатусПроблемы,
                        ОписаниеПроблемы,
                        НазваниеПроблемы};
                if ((parentКомпанияRowByFK_ПРОБЛЕМА_КОМПАНИЯП_КОМПАНИЯ != null)) {
                    columnValuesArray[1] = parentКомпанияRowByFK_ПРОБЛЕМА_КОМПАНИЯП_КОМПАНИЯ[0];
                }
                rowПроблемаRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowПроблемаRow);
                return rowПроблемаRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ПроблемаRow FindByИД_Проблемы(decimal ИД_Проблемы) {
                return ((ПроблемаRow)(this.Rows.Find(new object[] {
                            ИД_Проблемы})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ПроблемаDataTable cln = ((ПроблемаDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ПроблемаDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars() {
                this.columnИД_Проблемы = base.Columns["ИД_Проблемы"];
                this.columnИД_компании = base.Columns["ИД_компании"];
                this.columnНаправлениеПроблемы = base.Columns["НаправлениеПроблемы"];
                this.columnЦенаПроблемы = base.Columns["ЦенаПроблемы"];
                this.columnСтатусПроблемы = base.Columns["СтатусПроблемы"];
                this.columnОписаниеПроблемы = base.Columns["ОписаниеПроблемы"];
                this.columnНазваниеПроблемы = base.Columns["НазваниеПроблемы"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass() {
                this.columnИД_Проблемы = new global::System.Data.DataColumn("ИД_Проблемы", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_Проблемы);
                this.columnИД_компании = new global::System.Data.DataColumn("ИД_компании", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_компании);
                this.columnНаправлениеПроблемы = new global::System.Data.DataColumn("НаправлениеПроблемы", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаправлениеПроблемы);
                this.columnЦенаПроблемы = new global::System.Data.DataColumn("ЦенаПроблемы", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЦенаПроблемы);
                this.columnСтатусПроблемы = new global::System.Data.DataColumn("СтатусПроблемы", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтатусПроблемы);
                this.columnОписаниеПроблемы = new global::System.Data.DataColumn("ОписаниеПроблемы", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеПроблемы);
                this.columnНазваниеПроблемы = new global::System.Data.DataColumn("НазваниеПроблемы", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНазваниеПроблемы);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnИД_Проблемы}, true));
                this.columnИД_Проблемы.AutoIncrement = true;
                this.columnИД_Проблемы.AutoIncrementSeed = -1;
                this.columnИД_Проблемы.AutoIncrementStep = -1;
                this.columnИД_Проблемы.AllowDBNull = false;
                this.columnИД_Проблемы.ReadOnly = true;
                this.columnИД_Проблемы.Unique = true;
                this.columnНаправлениеПроблемы.AllowDBNull = false;
                this.columnНаправлениеПроблемы.MaxLength = 250;
                this.columnЦенаПроблемы.AllowDBNull = false;
                this.columnСтатусПроблемы.AllowDBNull = false;
                this.columnОписаниеПроблемы.AllowDBNull = false;
                this.columnОписаниеПроблемы.MaxLength = 5000;
                this.columnНазваниеПроблемы.AllowDBNull = false;
                this.columnНазваниеПроблемы.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ПроблемаRow NewПроблемаRow() {
                return ((ПроблемаRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ПроблемаRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ПроблемаRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ПроблемаRowChanged != null)) {
                    this.ПроблемаRowChanged(this, new ПроблемаRowChangeEvent(((ПроблемаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ПроблемаRowChanging != null)) {
                    this.ПроблемаRowChanging(this, new ПроблемаRowChangeEvent(((ПроблемаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ПроблемаRowDeleted != null)) {
                    this.ПроблемаRowDeleted(this, new ПроблемаRowChangeEvent(((ПроблемаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ПроблемаRowDeleting != null)) {
                    this.ПроблемаRowDeleting(this, new ПроблемаRowChangeEvent(((ПроблемаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveПроблемаRow(ПроблемаRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Uni3DataSet ds = new Uni3DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ПроблемаDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class РешениеЗадачиDataTable : global::System.Data.TypedTableBase<РешениеЗадачиRow> {
            
            private global::System.Data.DataColumn columnИД_РешенияЗадачи;
            
            private global::System.Data.DataColumn columnИД_задачи;
            
            private global::System.Data.DataColumn columnИД_Студента;
            
            private global::System.Data.DataColumn columnДатаРешенияЗадачи;
            
            private global::System.Data.DataColumn columnСтатусРешенияЗадачи;
            
            private global::System.Data.DataColumn columnКомментарийКРешениюЗадачи;
            
            private global::System.Data.DataColumn columnСсылкаНаРешениеЗадачи;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеЗадачиDataTable() {
                this.TableName = "РешениеЗадачи";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal РешениеЗадачиDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected РешениеЗадачиDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_РешенияЗадачиColumn {
                get {
                    return this.columnИД_РешенияЗадачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_задачиColumn {
                get {
                    return this.columnИД_задачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_СтудентаColumn {
                get {
                    return this.columnИД_Студента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ДатаРешенияЗадачиColumn {
                get {
                    return this.columnДатаРешенияЗадачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn СтатусРешенияЗадачиColumn {
                get {
                    return this.columnСтатусРешенияЗадачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn КомментарийКРешениюЗадачиColumn {
                get {
                    return this.columnКомментарийКРешениюЗадачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn СсылкаНаРешениеЗадачиColumn {
                get {
                    return this.columnСсылкаНаРешениеЗадачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеЗадачиRow this[int index] {
                get {
                    return ((РешениеЗадачиRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event РешениеЗадачиRowChangeEventHandler РешениеЗадачиRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event РешениеЗадачиRowChangeEventHandler РешениеЗадачиRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event РешениеЗадачиRowChangeEventHandler РешениеЗадачиRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event РешениеЗадачиRowChangeEventHandler РешениеЗадачиRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddРешениеЗадачиRow(РешениеЗадачиRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеЗадачиRow AddРешениеЗадачиRow(ЗадачаRow parentЗадачаRowByFK_РЕШЕНИЕЗ_ЗАДАЧИРЕШ_ЗАДАЧА, СтудентRow parentСтудентRowByFK_РЕШЕНИЕЗ_СТУДЕНТРЕ_СТУДЕНТ, System.DateTime ДатаРешенияЗадачи, bool СтатусРешенияЗадачи, string КомментарийКРешениюЗадачи, string СсылкаНаРешениеЗадачи) {
                РешениеЗадачиRow rowРешениеЗадачиRow = ((РешениеЗадачиRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        ДатаРешенияЗадачи,
                        СтатусРешенияЗадачи,
                        КомментарийКРешениюЗадачи,
                        СсылкаНаРешениеЗадачи};
                if ((parentЗадачаRowByFK_РЕШЕНИЕЗ_ЗАДАЧИРЕШ_ЗАДАЧА != null)) {
                    columnValuesArray[1] = parentЗадачаRowByFK_РЕШЕНИЕЗ_ЗАДАЧИРЕШ_ЗАДАЧА[0];
                }
                if ((parentСтудентRowByFK_РЕШЕНИЕЗ_СТУДЕНТРЕ_СТУДЕНТ != null)) {
                    columnValuesArray[2] = parentСтудентRowByFK_РЕШЕНИЕЗ_СТУДЕНТРЕ_СТУДЕНТ[0];
                }
                rowРешениеЗадачиRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowРешениеЗадачиRow);
                return rowРешениеЗадачиRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеЗадачиRow FindByИД_РешенияЗадачи(decimal ИД_РешенияЗадачи) {
                return ((РешениеЗадачиRow)(this.Rows.Find(new object[] {
                            ИД_РешенияЗадачи})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                РешениеЗадачиDataTable cln = ((РешениеЗадачиDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new РешениеЗадачиDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars() {
                this.columnИД_РешенияЗадачи = base.Columns["ИД_РешенияЗадачи"];
                this.columnИД_задачи = base.Columns["ИД_задачи"];
                this.columnИД_Студента = base.Columns["ИД_Студента"];
                this.columnДатаРешенияЗадачи = base.Columns["ДатаРешенияЗадачи"];
                this.columnСтатусРешенияЗадачи = base.Columns["СтатусРешенияЗадачи"];
                this.columnКомментарийКРешениюЗадачи = base.Columns["КомментарийКРешениюЗадачи"];
                this.columnСсылкаНаРешениеЗадачи = base.Columns["СсылкаНаРешениеЗадачи"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass() {
                this.columnИД_РешенияЗадачи = new global::System.Data.DataColumn("ИД_РешенияЗадачи", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_РешенияЗадачи);
                this.columnИД_задачи = new global::System.Data.DataColumn("ИД_задачи", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_задачи);
                this.columnИД_Студента = new global::System.Data.DataColumn("ИД_Студента", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_Студента);
                this.columnДатаРешенияЗадачи = new global::System.Data.DataColumn("ДатаРешенияЗадачи", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаРешенияЗадачи);
                this.columnСтатусРешенияЗадачи = new global::System.Data.DataColumn("СтатусРешенияЗадачи", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтатусРешенияЗадачи);
                this.columnКомментарийКРешениюЗадачи = new global::System.Data.DataColumn("КомментарийКРешениюЗадачи", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКомментарийКРешениюЗадачи);
                this.columnСсылкаНаРешениеЗадачи = new global::System.Data.DataColumn("СсылкаНаРешениеЗадачи", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСсылкаНаРешениеЗадачи);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnИД_РешенияЗадачи}, true));
                this.columnИД_РешенияЗадачи.AutoIncrement = true;
                this.columnИД_РешенияЗадачи.AutoIncrementSeed = -1;
                this.columnИД_РешенияЗадачи.AutoIncrementStep = -1;
                this.columnИД_РешенияЗадачи.AllowDBNull = false;
                this.columnИД_РешенияЗадачи.ReadOnly = true;
                this.columnИД_РешенияЗадачи.Unique = true;
                this.columnИД_задачи.AllowDBNull = false;
                this.columnДатаРешенияЗадачи.AllowDBNull = false;
                this.columnСтатусРешенияЗадачи.AllowDBNull = false;
                this.columnКомментарийКРешениюЗадачи.AllowDBNull = false;
                this.columnКомментарийКРешениюЗадачи.MaxLength = 5000;
                this.columnСсылкаНаРешениеЗадачи.AllowDBNull = false;
                this.columnСсылкаНаРешениеЗадачи.MaxLength = 300;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеЗадачиRow NewРешениеЗадачиRow() {
                return ((РешениеЗадачиRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new РешениеЗадачиRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(РешениеЗадачиRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.РешениеЗадачиRowChanged != null)) {
                    this.РешениеЗадачиRowChanged(this, new РешениеЗадачиRowChangeEvent(((РешениеЗадачиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.РешениеЗадачиRowChanging != null)) {
                    this.РешениеЗадачиRowChanging(this, new РешениеЗадачиRowChangeEvent(((РешениеЗадачиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.РешениеЗадачиRowDeleted != null)) {
                    this.РешениеЗадачиRowDeleted(this, new РешениеЗадачиRowChangeEvent(((РешениеЗадачиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.РешениеЗадачиRowDeleting != null)) {
                    this.РешениеЗадачиRowDeleting(this, new РешениеЗадачиRowChangeEvent(((РешениеЗадачиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveРешениеЗадачиRow(РешениеЗадачиRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Uni3DataSet ds = new Uni3DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "РешениеЗадачиDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class РешениеПроблемыDataTable : global::System.Data.TypedTableBase<РешениеПроблемыRow> {
            
            private global::System.Data.DataColumn columnИД_решенияПроблемы;
            
            private global::System.Data.DataColumn columnИД_Проблемы;
            
            private global::System.Data.DataColumn columnИД_Студента;
            
            private global::System.Data.DataColumn columnДатаРешенияПроблемы;
            
            private global::System.Data.DataColumn columnСтатусРешенияПроблемы;
            
            private global::System.Data.DataColumn columnКомментарийКРешениюПроблемы;
            
            private global::System.Data.DataColumn columnСсылкаНаРешениеПроблемы;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеПроблемыDataTable() {
                this.TableName = "РешениеПроблемы";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal РешениеПроблемыDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected РешениеПроблемыDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_решенияПроблемыColumn {
                get {
                    return this.columnИД_решенияПроблемы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_ПроблемыColumn {
                get {
                    return this.columnИД_Проблемы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_СтудентаColumn {
                get {
                    return this.columnИД_Студента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ДатаРешенияПроблемыColumn {
                get {
                    return this.columnДатаРешенияПроблемы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn СтатусРешенияПроблемыColumn {
                get {
                    return this.columnСтатусРешенияПроблемы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn КомментарийКРешениюПроблемыColumn {
                get {
                    return this.columnКомментарийКРешениюПроблемы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn СсылкаНаРешениеПроблемыColumn {
                get {
                    return this.columnСсылкаНаРешениеПроблемы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеПроблемыRow this[int index] {
                get {
                    return ((РешениеПроблемыRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event РешениеПроблемыRowChangeEventHandler РешениеПроблемыRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event РешениеПроблемыRowChangeEventHandler РешениеПроблемыRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event РешениеПроблемыRowChangeEventHandler РешениеПроблемыRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event РешениеПроблемыRowChangeEventHandler РешениеПроблемыRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddРешениеПроблемыRow(РешениеПроблемыRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеПроблемыRow AddРешениеПроблемыRow(ПроблемаRow parentПроблемаRowByFK_РЕШЕНИЕП_ПРОБЛЕМАР_ПРОБЛЕМА, СтудентRow parentСтудентRowByFK_РЕШЕНИЕП_СТУДЕНТРЕ_СТУДЕНТ, System.DateTime ДатаРешенияПроблемы, bool СтатусРешенияПроблемы, string КомментарийКРешениюПроблемы, string СсылкаНаРешениеПроблемы) {
                РешениеПроблемыRow rowРешениеПроблемыRow = ((РешениеПроблемыRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        ДатаРешенияПроблемы,
                        СтатусРешенияПроблемы,
                        КомментарийКРешениюПроблемы,
                        СсылкаНаРешениеПроблемы};
                if ((parentПроблемаRowByFK_РЕШЕНИЕП_ПРОБЛЕМАР_ПРОБЛЕМА != null)) {
                    columnValuesArray[1] = parentПроблемаRowByFK_РЕШЕНИЕП_ПРОБЛЕМАР_ПРОБЛЕМА[0];
                }
                if ((parentСтудентRowByFK_РЕШЕНИЕП_СТУДЕНТРЕ_СТУДЕНТ != null)) {
                    columnValuesArray[2] = parentСтудентRowByFK_РЕШЕНИЕП_СТУДЕНТРЕ_СТУДЕНТ[0];
                }
                rowРешениеПроблемыRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowРешениеПроблемыRow);
                return rowРешениеПроблемыRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеПроблемыRow FindByИД_решенияПроблемы(decimal ИД_решенияПроблемы) {
                return ((РешениеПроблемыRow)(this.Rows.Find(new object[] {
                            ИД_решенияПроблемы})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                РешениеПроблемыDataTable cln = ((РешениеПроблемыDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new РешениеПроблемыDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars() {
                this.columnИД_решенияПроблемы = base.Columns["ИД_решенияПроблемы"];
                this.columnИД_Проблемы = base.Columns["ИД_Проблемы"];
                this.columnИД_Студента = base.Columns["ИД_Студента"];
                this.columnДатаРешенияПроблемы = base.Columns["ДатаРешенияПроблемы"];
                this.columnСтатусРешенияПроблемы = base.Columns["СтатусРешенияПроблемы"];
                this.columnКомментарийКРешениюПроблемы = base.Columns["КомментарийКРешениюПроблемы"];
                this.columnСсылкаНаРешениеПроблемы = base.Columns["СсылкаНаРешениеПроблемы"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass() {
                this.columnИД_решенияПроблемы = new global::System.Data.DataColumn("ИД_решенияПроблемы", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_решенияПроблемы);
                this.columnИД_Проблемы = new global::System.Data.DataColumn("ИД_Проблемы", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_Проблемы);
                this.columnИД_Студента = new global::System.Data.DataColumn("ИД_Студента", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_Студента);
                this.columnДатаРешенияПроблемы = new global::System.Data.DataColumn("ДатаРешенияПроблемы", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаРешенияПроблемы);
                this.columnСтатусРешенияПроблемы = new global::System.Data.DataColumn("СтатусРешенияПроблемы", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтатусРешенияПроблемы);
                this.columnКомментарийКРешениюПроблемы = new global::System.Data.DataColumn("КомментарийКРешениюПроблемы", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКомментарийКРешениюПроблемы);
                this.columnСсылкаНаРешениеПроблемы = new global::System.Data.DataColumn("СсылкаНаРешениеПроблемы", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСсылкаНаРешениеПроблемы);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnИД_решенияПроблемы}, true));
                this.columnИД_решенияПроблемы.AutoIncrement = true;
                this.columnИД_решенияПроблемы.AutoIncrementSeed = -1;
                this.columnИД_решенияПроблемы.AutoIncrementStep = -1;
                this.columnИД_решенияПроблемы.AllowDBNull = false;
                this.columnИД_решенияПроблемы.ReadOnly = true;
                this.columnИД_решенияПроблемы.Unique = true;
                this.columnИД_Проблемы.AllowDBNull = false;
                this.columnИД_Студента.AllowDBNull = false;
                this.columnДатаРешенияПроблемы.AllowDBNull = false;
                this.columnСтатусРешенияПроблемы.AllowDBNull = false;
                this.columnКомментарийКРешениюПроблемы.AllowDBNull = false;
                this.columnКомментарийКРешениюПроблемы.MaxLength = 1000;
                this.columnСсылкаНаРешениеПроблемы.AllowDBNull = false;
                this.columnСсылкаНаРешениеПроблемы.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеПроблемыRow NewРешениеПроблемыRow() {
                return ((РешениеПроблемыRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new РешениеПроблемыRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(РешениеПроблемыRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.РешениеПроблемыRowChanged != null)) {
                    this.РешениеПроблемыRowChanged(this, new РешениеПроблемыRowChangeEvent(((РешениеПроблемыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.РешениеПроблемыRowChanging != null)) {
                    this.РешениеПроблемыRowChanging(this, new РешениеПроблемыRowChangeEvent(((РешениеПроблемыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.РешениеПроблемыRowDeleted != null)) {
                    this.РешениеПроблемыRowDeleted(this, new РешениеПроблемыRowChangeEvent(((РешениеПроблемыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.РешениеПроблемыRowDeleting != null)) {
                    this.РешениеПроблемыRowDeleting(this, new РешениеПроблемыRowChangeEvent(((РешениеПроблемыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveРешениеПроблемыRow(РешениеПроблемыRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Uni3DataSet ds = new Uni3DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "РешениеПроблемыDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class СтудентDataTable : global::System.Data.TypedTableBase<СтудентRow> {
            
            private global::System.Data.DataColumn columnИД_Студента;
            
            private global::System.Data.DataColumn columnФИОСтудента;
            
            private global::System.Data.DataColumn columnКурс;
            
            private global::System.Data.DataColumn columnФакультет;
            
            private global::System.Data.DataColumn columnНаправление;
            
            private global::System.Data.DataColumn columnEmailСтудента;
            
            private global::System.Data.DataColumn columnТелефонСтудента;
            
            private global::System.Data.DataColumn columnНомерКартыСтудента;
            
            private global::System.Data.DataColumn columnЛогинСтудента;
            
            private global::System.Data.DataColumn columnПарольСтудента;
            
            private global::System.Data.DataColumn columnОбоМне;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public СтудентDataTable() {
                this.TableName = "Студент";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal СтудентDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected СтудентDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ИД_СтудентаColumn {
                get {
                    return this.columnИД_Студента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ФИОСтудентаColumn {
                get {
                    return this.columnФИОСтудента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn КурсColumn {
                get {
                    return this.columnКурс;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ФакультетColumn {
                get {
                    return this.columnФакультет;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn НаправлениеColumn {
                get {
                    return this.columnНаправление;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn EmailСтудентаColumn {
                get {
                    return this.columnEmailСтудента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ТелефонСтудентаColumn {
                get {
                    return this.columnТелефонСтудента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn НомерКартыСтудентаColumn {
                get {
                    return this.columnНомерКартыСтудента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ЛогинСтудентаColumn {
                get {
                    return this.columnЛогинСтудента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ПарольСтудентаColumn {
                get {
                    return this.columnПарольСтудента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ОбоМнеColumn {
                get {
                    return this.columnОбоМне;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public СтудентRow this[int index] {
                get {
                    return ((СтудентRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event СтудентRowChangeEventHandler СтудентRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event СтудентRowChangeEventHandler СтудентRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event СтудентRowChangeEventHandler СтудентRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event СтудентRowChangeEventHandler СтудентRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddСтудентRow(СтудентRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public СтудентRow AddСтудентRow(string ФИОСтудента, int Курс, string Факультет, string Направление, string EmailСтудента, string ТелефонСтудента, string НомерКартыСтудента, string ЛогинСтудента, string ПарольСтудента, string ОбоМне) {
                СтудентRow rowСтудентRow = ((СтудентRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ФИОСтудента,
                        Курс,
                        Факультет,
                        Направление,
                        EmailСтудента,
                        ТелефонСтудента,
                        НомерКартыСтудента,
                        ЛогинСтудента,
                        ПарольСтудента,
                        ОбоМне};
                rowСтудентRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowСтудентRow);
                return rowСтудентRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public СтудентRow FindByИД_Студента(decimal ИД_Студента) {
                return ((СтудентRow)(this.Rows.Find(new object[] {
                            ИД_Студента})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                СтудентDataTable cln = ((СтудентDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new СтудентDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars() {
                this.columnИД_Студента = base.Columns["ИД_Студента"];
                this.columnФИОСтудента = base.Columns["ФИОСтудента"];
                this.columnКурс = base.Columns["Курс"];
                this.columnФакультет = base.Columns["Факультет"];
                this.columnНаправление = base.Columns["Направление"];
                this.columnEmailСтудента = base.Columns["EmailСтудента"];
                this.columnТелефонСтудента = base.Columns["ТелефонСтудента"];
                this.columnНомерКартыСтудента = base.Columns["НомерКартыСтудента"];
                this.columnЛогинСтудента = base.Columns["ЛогинСтудента"];
                this.columnПарольСтудента = base.Columns["ПарольСтудента"];
                this.columnОбоМне = base.Columns["ОбоМне"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass() {
                this.columnИД_Студента = new global::System.Data.DataColumn("ИД_Студента", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИД_Студента);
                this.columnФИОСтудента = new global::System.Data.DataColumn("ФИОСтудента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnФИОСтудента);
                this.columnКурс = new global::System.Data.DataColumn("Курс", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКурс);
                this.columnФакультет = new global::System.Data.DataColumn("Факультет", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnФакультет);
                this.columnНаправление = new global::System.Data.DataColumn("Направление", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаправление);
                this.columnEmailСтудента = new global::System.Data.DataColumn("EmailСтудента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailСтудента);
                this.columnТелефонСтудента = new global::System.Data.DataColumn("ТелефонСтудента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТелефонСтудента);
                this.columnНомерКартыСтудента = new global::System.Data.DataColumn("НомерКартыСтудента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерКартыСтудента);
                this.columnЛогинСтудента = new global::System.Data.DataColumn("ЛогинСтудента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЛогинСтудента);
                this.columnПарольСтудента = new global::System.Data.DataColumn("ПарольСтудента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnПарольСтудента);
                this.columnОбоМне = new global::System.Data.DataColumn("ОбоМне", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОбоМне);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnИД_Студента}, true));
                this.columnИД_Студента.AutoIncrement = true;
                this.columnИД_Студента.AutoIncrementSeed = -1;
                this.columnИД_Студента.AutoIncrementStep = -1;
                this.columnИД_Студента.AllowDBNull = false;
                this.columnИД_Студента.ReadOnly = true;
                this.columnИД_Студента.Unique = true;
                this.columnФИОСтудента.AllowDBNull = false;
                this.columnФИОСтудента.MaxLength = 100;
                this.columnКурс.AllowDBNull = false;
                this.columnФакультет.AllowDBNull = false;
                this.columnФакультет.MaxLength = 100;
                this.columnНаправление.AllowDBNull = false;
                this.columnНаправление.MaxLength = 250;
                this.columnEmailСтудента.AllowDBNull = false;
                this.columnEmailСтудента.MaxLength = 100;
                this.columnТелефонСтудента.AllowDBNull = false;
                this.columnТелефонСтудента.MaxLength = 20;
                this.columnНомерКартыСтудента.AllowDBNull = false;
                this.columnНомерКартыСтудента.MaxLength = 30;
                this.columnЛогинСтудента.AllowDBNull = false;
                this.columnЛогинСтудента.MaxLength = 50;
                this.columnПарольСтудента.AllowDBNull = false;
                this.columnПарольСтудента.MaxLength = 50;
                this.columnОбоМне.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public СтудентRow NewСтудентRow() {
                return ((СтудентRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new СтудентRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(СтудентRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.СтудентRowChanged != null)) {
                    this.СтудентRowChanged(this, new СтудентRowChangeEvent(((СтудентRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.СтудентRowChanging != null)) {
                    this.СтудентRowChanging(this, new СтудентRowChangeEvent(((СтудентRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.СтудентRowDeleted != null)) {
                    this.СтудентRowDeleted(this, new СтудентRowChangeEvent(((СтудентRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.СтудентRowDeleting != null)) {
                    this.СтудентRowDeleting(this, new СтудентRowChangeEvent(((СтудентRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveСтудентRow(СтудентRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Uni3DataSet ds = new Uni3DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "СтудентDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ЗадачаRow : global::System.Data.DataRow {
            
            private ЗадачаDataTable tableЗадача;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal ЗадачаRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableЗадача = ((ЗадачаDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_задачи {
                get {
                    return ((decimal)(this[this.tableЗадача.ИД_задачиColumn]));
                }
                set {
                    this[this.tableЗадача.ИД_задачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_компании {
                get {
                    return ((decimal)(this[this.tableЗадача.ИД_компанииColumn]));
                }
                set {
                    this[this.tableЗадача.ИД_компанииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string НаправлениеЗадачи {
                get {
                    return ((string)(this[this.tableЗадача.НаправлениеЗадачиColumn]));
                }
                set {
                    this[this.tableЗадача.НаправлениеЗадачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool СтатусЗадачи {
                get {
                    return ((bool)(this[this.tableЗадача.СтатусЗадачиColumn]));
                }
                set {
                    this[this.tableЗадача.СтатусЗадачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public double ЦенаЗадачи {
                get {
                    return ((double)(this[this.tableЗадача.ЦенаЗадачиColumn]));
                }
                set {
                    this[this.tableЗадача.ЦенаЗадачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ОписаниеЗадачи {
                get {
                    return ((string)(this[this.tableЗадача.ОписаниеЗадачиColumn]));
                }
                set {
                    this[this.tableЗадача.ОписаниеЗадачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string НазваниеЗадачи {
                get {
                    return ((string)(this[this.tableЗадача.НазваниеЗадачиColumn]));
                }
                set {
                    this[this.tableЗадача.НазваниеЗадачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеЗадачиRow[] GetРешениеЗадачиRows() {
                if ((this.Table.ChildRelations["FK_РЕШЕНИЕЗ_ЗАДАЧИРЕШ_ЗАДАЧА"] == null)) {
                    return new РешениеЗадачиRow[0];
                }
                else {
                    return ((РешениеЗадачиRow[])(base.GetChildRows(this.Table.ChildRelations["FK_РЕШЕНИЕЗ_ЗАДАЧИРЕШ_ЗАДАЧА"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class КомпанияRow : global::System.Data.DataRow {
            
            private КомпанияDataTable tableКомпания;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal КомпанияRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableКомпания = ((КомпанияDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_компании {
                get {
                    return ((decimal)(this[this.tableКомпания.ИД_компанииColumn]));
                }
                set {
                    this[this.tableКомпания.ИД_компанииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string НазваниеКомпании {
                get {
                    return ((string)(this[this.tableКомпания.НазваниеКомпанииColumn]));
                }
                set {
                    this[this.tableКомпания.НазваниеКомпанииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string СфераДеятельности {
                get {
                    return ((string)(this[this.tableКомпания.СфераДеятельностиColumn]));
                }
                set {
                    this[this.tableКомпания.СфераДеятельностиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ТелефонКомпании {
                get {
                    return ((string)(this[this.tableКомпания.ТелефонКомпанииColumn]));
                }
                set {
                    this[this.tableКомпания.ТелефонКомпанииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string EmailКомпании {
                get {
                    return ((string)(this[this.tableКомпания.EmailКомпанииColumn]));
                }
                set {
                    this[this.tableКомпания.EmailКомпанииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ОписаниеКомпании {
                get {
                    try {
                        return ((string)(this[this.tableКомпания.ОписаниеКомпанииColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'ОписаниеКомпании\' в таблице \'Компания\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableКомпания.ОписаниеКомпанииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ЛогинКомпании {
                get {
                    return ((string)(this[this.tableКомпания.ЛогинКомпанииColumn]));
                }
                set {
                    this[this.tableКомпания.ЛогинКомпанииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ПарольКомпании {
                get {
                    return ((string)(this[this.tableКомпания.ПарольКомпанииColumn]));
                }
                set {
                    this[this.tableКомпания.ПарольКомпанииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsОписаниеКомпанииNull() {
                return this.IsNull(this.tableКомпания.ОписаниеКомпанииColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetОписаниеКомпанииNull() {
                this[this.tableКомпания.ОписаниеКомпанииColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыКомпанииRow[] GetОтзывыКомпанииRows() {
                if ((this.Table.ChildRelations["FK_ОТЗЫВЫКО_КОМПАНИЯО_КОМПАНИЯ"] == null)) {
                    return new ОтзывыКомпанииRow[0];
                }
                else {
                    return ((ОтзывыКомпанииRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ОТЗЫВЫКО_КОМПАНИЯО_КОМПАНИЯ"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыСтудентаRow[] GetОтзывыСтудентаRows() {
                if ((this.Table.ChildRelations["FK_ОТЗЫВЫСТ_КОМПАНИЯО_КОМПАНИЯ"] == null)) {
                    return new ОтзывыСтудентаRow[0];
                }
                else {
                    return ((ОтзывыСтудентаRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ОТЗЫВЫСТ_КОМПАНИЯО_КОМПАНИЯ"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ПроблемаRow[] GetПроблемаRows() {
                if ((this.Table.ChildRelations["FK_ПРОБЛЕМА_КОМПАНИЯП_КОМПАНИЯ"] == null)) {
                    return new ПроблемаRow[0];
                }
                else {
                    return ((ПроблемаRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ПРОБЛЕМА_КОМПАНИЯП_КОМПАНИЯ"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ОтзывыКомпанииRow : global::System.Data.DataRow {
            
            private ОтзывыКомпанииDataTable tableОтзывыКомпании;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal ОтзывыКомпанииRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableОтзывыКомпании = ((ОтзывыКомпанииDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_ОтзываКомпании {
                get {
                    return ((decimal)(this[this.tableОтзывыКомпании.ИД_ОтзываКомпанииColumn]));
                }
                set {
                    this[this.tableОтзывыКомпании.ИД_ОтзываКомпанииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_компании {
                get {
                    try {
                        return ((decimal)(this[this.tableОтзывыКомпании.ИД_компанииColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'ИД_компании\' в таблице \'ОтзывыКомпании\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableОтзывыКомпании.ИД_компанииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_Студента {
                get {
                    return ((decimal)(this[this.tableОтзывыКомпании.ИД_СтудентаColumn]));
                }
                set {
                    this[this.tableОтзывыКомпании.ИД_СтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ОтзывКомпании {
                get {
                    return ((string)(this[this.tableОтзывыКомпании.ОтзывКомпанииColumn]));
                }
                set {
                    this[this.tableОтзывыКомпании.ОтзывКомпанииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public КомпанияRow КомпанияRow {
                get {
                    return ((КомпанияRow)(this.GetParentRow(this.Table.ParentRelations["FK_ОТЗЫВЫКО_КОМПАНИЯО_КОМПАНИЯ"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ОТЗЫВЫКО_КОМПАНИЯО_КОМПАНИЯ"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public СтудентRow СтудентRow {
                get {
                    return ((СтудентRow)(this.GetParentRow(this.Table.ParentRelations["FK_ОТЗЫВЫКО_СТУДЕНТОТ_СТУДЕНТ"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ОТЗЫВЫКО_СТУДЕНТОТ_СТУДЕНТ"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsИД_компанииNull() {
                return this.IsNull(this.tableОтзывыКомпании.ИД_компанииColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetИД_компанииNull() {
                this[this.tableОтзывыКомпании.ИД_компанииColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ОтзывыСтудентаRow : global::System.Data.DataRow {
            
            private ОтзывыСтудентаDataTable tableОтзывыСтудента;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal ОтзывыСтудентаRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableОтзывыСтудента = ((ОтзывыСтудентаDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_ОтзываСтудента {
                get {
                    return ((decimal)(this[this.tableОтзывыСтудента.ИД_ОтзываСтудентаColumn]));
                }
                set {
                    this[this.tableОтзывыСтудента.ИД_ОтзываСтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_Студента {
                get {
                    return ((decimal)(this[this.tableОтзывыСтудента.ИД_СтудентаColumn]));
                }
                set {
                    this[this.tableОтзывыСтудента.ИД_СтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_компании {
                get {
                    return ((decimal)(this[this.tableОтзывыСтудента.ИД_компанииColumn]));
                }
                set {
                    this[this.tableОтзывыСтудента.ИД_компанииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ОтзывСтудента {
                get {
                    return ((string)(this[this.tableОтзывыСтудента.ОтзывСтудентаColumn]));
                }
                set {
                    this[this.tableОтзывыСтудента.ОтзывСтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public КомпанияRow КомпанияRow {
                get {
                    return ((КомпанияRow)(this.GetParentRow(this.Table.ParentRelations["FK_ОТЗЫВЫСТ_КОМПАНИЯО_КОМПАНИЯ"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ОТЗЫВЫСТ_КОМПАНИЯО_КОМПАНИЯ"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public СтудентRow СтудентRow {
                get {
                    return ((СтудентRow)(this.GetParentRow(this.Table.ParentRelations["FK_ОТЗЫВЫСТ_СТУДЕНТОТ_СТУДЕНТ"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ОТЗЫВЫСТ_СТУДЕНТОТ_СТУДЕНТ"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ПроблемаRow : global::System.Data.DataRow {
            
            private ПроблемаDataTable tableПроблема;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal ПроблемаRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableПроблема = ((ПроблемаDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_Проблемы {
                get {
                    return ((decimal)(this[this.tableПроблема.ИД_ПроблемыColumn]));
                }
                set {
                    this[this.tableПроблема.ИД_ПроблемыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_компании {
                get {
                    try {
                        return ((decimal)(this[this.tableПроблема.ИД_компанииColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'ИД_компании\' в таблице \'Проблема\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableПроблема.ИД_компанииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string НаправлениеПроблемы {
                get {
                    return ((string)(this[this.tableПроблема.НаправлениеПроблемыColumn]));
                }
                set {
                    this[this.tableПроблема.НаправлениеПроблемыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public double ЦенаПроблемы {
                get {
                    return ((double)(this[this.tableПроблема.ЦенаПроблемыColumn]));
                }
                set {
                    this[this.tableПроблема.ЦенаПроблемыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool СтатусПроблемы {
                get {
                    return ((bool)(this[this.tableПроблема.СтатусПроблемыColumn]));
                }
                set {
                    this[this.tableПроблема.СтатусПроблемыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ОписаниеПроблемы {
                get {
                    return ((string)(this[this.tableПроблема.ОписаниеПроблемыColumn]));
                }
                set {
                    this[this.tableПроблема.ОписаниеПроблемыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string НазваниеПроблемы {
                get {
                    return ((string)(this[this.tableПроблема.НазваниеПроблемыColumn]));
                }
                set {
                    this[this.tableПроблема.НазваниеПроблемыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public КомпанияRow КомпанияRow {
                get {
                    return ((КомпанияRow)(this.GetParentRow(this.Table.ParentRelations["FK_ПРОБЛЕМА_КОМПАНИЯП_КОМПАНИЯ"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ПРОБЛЕМА_КОМПАНИЯП_КОМПАНИЯ"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsИД_компанииNull() {
                return this.IsNull(this.tableПроблема.ИД_компанииColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetИД_компанииNull() {
                this[this.tableПроблема.ИД_компанииColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеПроблемыRow[] GetРешениеПроблемыRows() {
                if ((this.Table.ChildRelations["FK_РЕШЕНИЕП_ПРОБЛЕМАР_ПРОБЛЕМА"] == null)) {
                    return new РешениеПроблемыRow[0];
                }
                else {
                    return ((РешениеПроблемыRow[])(base.GetChildRows(this.Table.ChildRelations["FK_РЕШЕНИЕП_ПРОБЛЕМАР_ПРОБЛЕМА"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class РешениеЗадачиRow : global::System.Data.DataRow {
            
            private РешениеЗадачиDataTable tableРешениеЗадачи;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal РешениеЗадачиRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableРешениеЗадачи = ((РешениеЗадачиDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_РешенияЗадачи {
                get {
                    return ((decimal)(this[this.tableРешениеЗадачи.ИД_РешенияЗадачиColumn]));
                }
                set {
                    this[this.tableРешениеЗадачи.ИД_РешенияЗадачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_задачи {
                get {
                    return ((decimal)(this[this.tableРешениеЗадачи.ИД_задачиColumn]));
                }
                set {
                    this[this.tableРешениеЗадачи.ИД_задачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_Студента {
                get {
                    try {
                        return ((decimal)(this[this.tableРешениеЗадачи.ИД_СтудентаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'ИД_Студента\' в таблице \'РешениеЗадачи\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableРешениеЗадачи.ИД_СтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public System.DateTime ДатаРешенияЗадачи {
                get {
                    return ((global::System.DateTime)(this[this.tableРешениеЗадачи.ДатаРешенияЗадачиColumn]));
                }
                set {
                    this[this.tableРешениеЗадачи.ДатаРешенияЗадачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool СтатусРешенияЗадачи {
                get {
                    return ((bool)(this[this.tableРешениеЗадачи.СтатусРешенияЗадачиColumn]));
                }
                set {
                    this[this.tableРешениеЗадачи.СтатусРешенияЗадачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string КомментарийКРешениюЗадачи {
                get {
                    return ((string)(this[this.tableРешениеЗадачи.КомментарийКРешениюЗадачиColumn]));
                }
                set {
                    this[this.tableРешениеЗадачи.КомментарийКРешениюЗадачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string СсылкаНаРешениеЗадачи {
                get {
                    return ((string)(this[this.tableРешениеЗадачи.СсылкаНаРешениеЗадачиColumn]));
                }
                set {
                    this[this.tableРешениеЗадачи.СсылкаНаРешениеЗадачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ЗадачаRow ЗадачаRow {
                get {
                    return ((ЗадачаRow)(this.GetParentRow(this.Table.ParentRelations["FK_РЕШЕНИЕЗ_ЗАДАЧИРЕШ_ЗАДАЧА"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_РЕШЕНИЕЗ_ЗАДАЧИРЕШ_ЗАДАЧА"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public СтудентRow СтудентRow {
                get {
                    return ((СтудентRow)(this.GetParentRow(this.Table.ParentRelations["FK_РЕШЕНИЕЗ_СТУДЕНТРЕ_СТУДЕНТ"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_РЕШЕНИЕЗ_СТУДЕНТРЕ_СТУДЕНТ"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsИД_СтудентаNull() {
                return this.IsNull(this.tableРешениеЗадачи.ИД_СтудентаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetИД_СтудентаNull() {
                this[this.tableРешениеЗадачи.ИД_СтудентаColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class РешениеПроблемыRow : global::System.Data.DataRow {
            
            private РешениеПроблемыDataTable tableРешениеПроблемы;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal РешениеПроблемыRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableРешениеПроблемы = ((РешениеПроблемыDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_решенияПроблемы {
                get {
                    return ((decimal)(this[this.tableРешениеПроблемы.ИД_решенияПроблемыColumn]));
                }
                set {
                    this[this.tableРешениеПроблемы.ИД_решенияПроблемыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_Проблемы {
                get {
                    return ((decimal)(this[this.tableРешениеПроблемы.ИД_ПроблемыColumn]));
                }
                set {
                    this[this.tableРешениеПроблемы.ИД_ПроблемыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_Студента {
                get {
                    return ((decimal)(this[this.tableРешениеПроблемы.ИД_СтудентаColumn]));
                }
                set {
                    this[this.tableРешениеПроблемы.ИД_СтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public System.DateTime ДатаРешенияПроблемы {
                get {
                    return ((global::System.DateTime)(this[this.tableРешениеПроблемы.ДатаРешенияПроблемыColumn]));
                }
                set {
                    this[this.tableРешениеПроблемы.ДатаРешенияПроблемыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool СтатусРешенияПроблемы {
                get {
                    return ((bool)(this[this.tableРешениеПроблемы.СтатусРешенияПроблемыColumn]));
                }
                set {
                    this[this.tableРешениеПроблемы.СтатусРешенияПроблемыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string КомментарийКРешениюПроблемы {
                get {
                    return ((string)(this[this.tableРешениеПроблемы.КомментарийКРешениюПроблемыColumn]));
                }
                set {
                    this[this.tableРешениеПроблемы.КомментарийКРешениюПроблемыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string СсылкаНаРешениеПроблемы {
                get {
                    return ((string)(this[this.tableРешениеПроблемы.СсылкаНаРешениеПроблемыColumn]));
                }
                set {
                    this[this.tableРешениеПроблемы.СсылкаНаРешениеПроблемыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ПроблемаRow ПроблемаRow {
                get {
                    return ((ПроблемаRow)(this.GetParentRow(this.Table.ParentRelations["FK_РЕШЕНИЕП_ПРОБЛЕМАР_ПРОБЛЕМА"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_РЕШЕНИЕП_ПРОБЛЕМАР_ПРОБЛЕМА"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public СтудентRow СтудентRow {
                get {
                    return ((СтудентRow)(this.GetParentRow(this.Table.ParentRelations["FK_РЕШЕНИЕП_СТУДЕНТРЕ_СТУДЕНТ"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_РЕШЕНИЕП_СТУДЕНТРЕ_СТУДЕНТ"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class СтудентRow : global::System.Data.DataRow {
            
            private СтудентDataTable tableСтудент;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal СтудентRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableСтудент = ((СтудентDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ИД_Студента {
                get {
                    return ((decimal)(this[this.tableСтудент.ИД_СтудентаColumn]));
                }
                set {
                    this[this.tableСтудент.ИД_СтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ФИОСтудента {
                get {
                    return ((string)(this[this.tableСтудент.ФИОСтудентаColumn]));
                }
                set {
                    this[this.tableСтудент.ФИОСтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int Курс {
                get {
                    return ((int)(this[this.tableСтудент.КурсColumn]));
                }
                set {
                    this[this.tableСтудент.КурсColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Факультет {
                get {
                    return ((string)(this[this.tableСтудент.ФакультетColumn]));
                }
                set {
                    this[this.tableСтудент.ФакультетColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Направление {
                get {
                    return ((string)(this[this.tableСтудент.НаправлениеColumn]));
                }
                set {
                    this[this.tableСтудент.НаправлениеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string EmailСтудента {
                get {
                    return ((string)(this[this.tableСтудент.EmailСтудентаColumn]));
                }
                set {
                    this[this.tableСтудент.EmailСтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ТелефонСтудента {
                get {
                    return ((string)(this[this.tableСтудент.ТелефонСтудентаColumn]));
                }
                set {
                    this[this.tableСтудент.ТелефонСтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string НомерКартыСтудента {
                get {
                    return ((string)(this[this.tableСтудент.НомерКартыСтудентаColumn]));
                }
                set {
                    this[this.tableСтудент.НомерКартыСтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ЛогинСтудента {
                get {
                    return ((string)(this[this.tableСтудент.ЛогинСтудентаColumn]));
                }
                set {
                    this[this.tableСтудент.ЛогинСтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ПарольСтудента {
                get {
                    return ((string)(this[this.tableСтудент.ПарольСтудентаColumn]));
                }
                set {
                    this[this.tableСтудент.ПарольСтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ОбоМне {
                get {
                    try {
                        return ((string)(this[this.tableСтудент.ОбоМнеColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'ОбоМне\' в таблице \'Студент\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableСтудент.ОбоМнеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsОбоМнеNull() {
                return this.IsNull(this.tableСтудент.ОбоМнеColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetОбоМнеNull() {
                this[this.tableСтудент.ОбоМнеColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыКомпанииRow[] GetОтзывыКомпанииRows() {
                if ((this.Table.ChildRelations["FK_ОТЗЫВЫКО_СТУДЕНТОТ_СТУДЕНТ"] == null)) {
                    return new ОтзывыКомпанииRow[0];
                }
                else {
                    return ((ОтзывыКомпанииRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ОТЗЫВЫКО_СТУДЕНТОТ_СТУДЕНТ"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыСтудентаRow[] GetОтзывыСтудентаRows() {
                if ((this.Table.ChildRelations["FK_ОТЗЫВЫСТ_СТУДЕНТОТ_СТУДЕНТ"] == null)) {
                    return new ОтзывыСтудентаRow[0];
                }
                else {
                    return ((ОтзывыСтудентаRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ОТЗЫВЫСТ_СТУДЕНТОТ_СТУДЕНТ"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеЗадачиRow[] GetРешениеЗадачиRows() {
                if ((this.Table.ChildRelations["FK_РЕШЕНИЕЗ_СТУДЕНТРЕ_СТУДЕНТ"] == null)) {
                    return new РешениеЗадачиRow[0];
                }
                else {
                    return ((РешениеЗадачиRow[])(base.GetChildRows(this.Table.ChildRelations["FK_РЕШЕНИЕЗ_СТУДЕНТРЕ_СТУДЕНТ"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеПроблемыRow[] GetРешениеПроблемыRows() {
                if ((this.Table.ChildRelations["FK_РЕШЕНИЕП_СТУДЕНТРЕ_СТУДЕНТ"] == null)) {
                    return new РешениеПроблемыRow[0];
                }
                else {
                    return ((РешениеПроблемыRow[])(base.GetChildRows(this.Table.ChildRelations["FK_РЕШЕНИЕП_СТУДЕНТРЕ_СТУДЕНТ"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class ЗадачаRowChangeEvent : global::System.EventArgs {
            
            private ЗадачаRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ЗадачаRowChangeEvent(ЗадачаRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ЗадачаRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class КомпанияRowChangeEvent : global::System.EventArgs {
            
            private КомпанияRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public КомпанияRowChangeEvent(КомпанияRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public КомпанияRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class ОтзывыКомпанииRowChangeEvent : global::System.EventArgs {
            
            private ОтзывыКомпанииRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыКомпанииRowChangeEvent(ОтзывыКомпанииRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыКомпанииRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class ОтзывыСтудентаRowChangeEvent : global::System.EventArgs {
            
            private ОтзывыСтудентаRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыСтудентаRowChangeEvent(ОтзывыСтудентаRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ОтзывыСтудентаRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class ПроблемаRowChangeEvent : global::System.EventArgs {
            
            private ПроблемаRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ПроблемаRowChangeEvent(ПроблемаRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public ПроблемаRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class РешениеЗадачиRowChangeEvent : global::System.EventArgs {
            
            private РешениеЗадачиRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеЗадачиRowChangeEvent(РешениеЗадачиRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеЗадачиRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class РешениеПроблемыRowChangeEvent : global::System.EventArgs {
            
            private РешениеПроблемыRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеПроблемыRowChangeEvent(РешениеПроблемыRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public РешениеПроблемыRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class СтудентRowChangeEvent : global::System.EventArgs {
            
            private СтудентRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public СтудентRowChangeEvent(СтудентRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public СтудентRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace WindowsFormsApp1.Uni3DataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ЗадачаTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public ЗадачаTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Задача";
            tableMapping.ColumnMappings.Add("ИД_задачи", "ИД_задачи");
            tableMapping.ColumnMappings.Add("ИД_компании", "ИД_компании");
            tableMapping.ColumnMappings.Add("НаправлениеЗадачи", "НаправлениеЗадачи");
            tableMapping.ColumnMappings.Add("СтатусЗадачи", "СтатусЗадачи");
            tableMapping.ColumnMappings.Add("ЦенаЗадачи", "ЦенаЗадачи");
            tableMapping.ColumnMappings.Add("ОписаниеЗадачи", "ОписаниеЗадачи");
            tableMapping.ColumnMappings.Add("НазваниеЗадачи", "НазваниеЗадачи");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Задача] WHERE (([ИД_задачи] = @Original_ИД_задачи) AND ([ИД_компании] = @Original_ИД_компании) AND ([НаправлениеЗадачи] = @Original_НаправлениеЗадачи) AND ([СтатусЗадачи] = @Original_СтатусЗадачи) AND ([ЦенаЗадачи] = @Original_ЦенаЗадачи) AND ([ОписаниеЗадачи] = @Original_ОписаниеЗадачи) AND ([НазваниеЗадачи] = @Original_НазваниеЗадачи))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_задачи", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_задачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НаправлениеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаправлениеЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СтатусЗадачи", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ЦенаЗадачи", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЦенаЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НазваниеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Задача] ([ИД_компании], [НаправлениеЗадачи], [СтатусЗадачи], [ЦенаЗадачи], [ОписаниеЗадачи], [НазваниеЗадачи]) VALUES (@ИД_компании, @НаправлениеЗадачи, @СтатусЗадачи, @ЦенаЗадачи, @ОписаниеЗадачи, @НазваниеЗадачи);
SELECT ИД_задачи, ИД_компании, НаправлениеЗадачи, СтатусЗадачи, ЦенаЗадачи, ОписаниеЗадачи, НазваниеЗадачи FROM Задача WHERE (ИД_задачи = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НаправлениеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаправлениеЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СтатусЗадачи", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ЦенаЗадачи", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЦенаЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НазваниеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Задача] SET [ИД_компании] = @ИД_компании, [НаправлениеЗадачи] = @НаправлениеЗадачи, [СтатусЗадачи] = @СтатусЗадачи, [ЦенаЗадачи] = @ЦенаЗадачи, [ОписаниеЗадачи] = @ОписаниеЗадачи, [НазваниеЗадачи] = @НазваниеЗадачи WHERE (([ИД_задачи] = @Original_ИД_задачи) AND ([ИД_компании] = @Original_ИД_компании) AND ([НаправлениеЗадачи] = @Original_НаправлениеЗадачи) AND ([СтатусЗадачи] = @Original_СтатусЗадачи) AND ([ЦенаЗадачи] = @Original_ЦенаЗадачи) AND ([ОписаниеЗадачи] = @Original_ОписаниеЗадачи) AND ([НазваниеЗадачи] = @Original_НазваниеЗадачи));
SELECT ИД_задачи, ИД_компании, НаправлениеЗадачи, СтатусЗадачи, ЦенаЗадачи, ОписаниеЗадачи, НазваниеЗадачи FROM Задача WHERE (ИД_задачи = @ИД_задачи)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НаправлениеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаправлениеЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СтатусЗадачи", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ЦенаЗадачи", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЦенаЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НазваниеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_задачи", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_задачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НаправлениеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаправлениеЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СтатусЗадачи", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ЦенаЗадачи", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЦенаЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НазваниеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_задачи", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_задачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApp1.Properties.Settings.Default.Uni3ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ИД_задачи, ИД_компании, НаправлениеЗадачи, СтатусЗадачи, ЦенаЗадачи, Описа" +
                "ниеЗадачи, НазваниеЗадачи FROM dbo.Задача";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Uni3DataSet.ЗадачаDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Uni3DataSet.ЗадачаDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Uni3DataSet.ЗадачаDataTable dataTable = new Uni3DataSet.ЗадачаDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet.ЗадачаDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet dataSet) {
            return this.Adapter.Update(dataSet, "Задача");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_ИД_задачи, decimal Original_ИД_компании, string Original_НаправлениеЗадачи, bool Original_СтатусЗадачи, double Original_ЦенаЗадачи, string Original_ОписаниеЗадачи, string Original_НазваниеЗадачи) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_ИД_задачи));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_ИД_компании));
            if ((Original_НаправлениеЗадачи == null)) {
                throw new global::System.ArgumentNullException("Original_НаправлениеЗадачи");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_НаправлениеЗадачи));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_СтатусЗадачи));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_ЦенаЗадачи));
            if ((Original_ОписаниеЗадачи == null)) {
                throw new global::System.ArgumentNullException("Original_ОписаниеЗадачи");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_ОписаниеЗадачи));
            }
            if ((Original_НазваниеЗадачи == null)) {
                throw new global::System.ArgumentNullException("Original_НазваниеЗадачи");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_НазваниеЗадачи));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal ИД_компании, string НаправлениеЗадачи, bool СтатусЗадачи, double ЦенаЗадачи, string ОписаниеЗадачи, string НазваниеЗадачи) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(ИД_компании));
            if ((НаправлениеЗадачи == null)) {
                throw new global::System.ArgumentNullException("НаправлениеЗадачи");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(НаправлениеЗадачи));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(СтатусЗадачи));
            this.Adapter.InsertCommand.Parameters[3].Value = ((double)(ЦенаЗадачи));
            if ((ОписаниеЗадачи == null)) {
                throw new global::System.ArgumentNullException("ОписаниеЗадачи");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ОписаниеЗадачи));
            }
            if ((НазваниеЗадачи == null)) {
                throw new global::System.ArgumentNullException("НазваниеЗадачи");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(НазваниеЗадачи));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal ИД_компании, string НаправлениеЗадачи, bool СтатусЗадачи, double ЦенаЗадачи, string ОписаниеЗадачи, string НазваниеЗадачи, decimal Original_ИД_задачи, decimal Original_ИД_компании, string Original_НаправлениеЗадачи, bool Original_СтатусЗадачи, double Original_ЦенаЗадачи, string Original_ОписаниеЗадачи, string Original_НазваниеЗадачи, decimal ИД_задачи) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(ИД_компании));
            if ((НаправлениеЗадачи == null)) {
                throw new global::System.ArgumentNullException("НаправлениеЗадачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(НаправлениеЗадачи));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(СтатусЗадачи));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(ЦенаЗадачи));
            if ((ОписаниеЗадачи == null)) {
                throw new global::System.ArgumentNullException("ОписаниеЗадачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ОписаниеЗадачи));
            }
            if ((НазваниеЗадачи == null)) {
                throw new global::System.ArgumentNullException("НазваниеЗадачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(НазваниеЗадачи));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_ИД_задачи));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_ИД_компании));
            if ((Original_НаправлениеЗадачи == null)) {
                throw new global::System.ArgumentNullException("Original_НаправлениеЗадачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_НаправлениеЗадачи));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Original_СтатусЗадачи));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(Original_ЦенаЗадачи));
            if ((Original_ОписаниеЗадачи == null)) {
                throw new global::System.ArgumentNullException("Original_ОписаниеЗадачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_ОписаниеЗадачи));
            }
            if ((Original_НазваниеЗадачи == null)) {
                throw new global::System.ArgumentNullException("Original_НазваниеЗадачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_НазваниеЗадачи));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(ИД_задачи));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal ИД_компании, string НаправлениеЗадачи, bool СтатусЗадачи, double ЦенаЗадачи, string ОписаниеЗадачи, string НазваниеЗадачи, decimal Original_ИД_задачи, decimal Original_ИД_компании, string Original_НаправлениеЗадачи, bool Original_СтатусЗадачи, double Original_ЦенаЗадачи, string Original_ОписаниеЗадачи, string Original_НазваниеЗадачи) {
            return this.Update(ИД_компании, НаправлениеЗадачи, СтатусЗадачи, ЦенаЗадачи, ОписаниеЗадачи, НазваниеЗадачи, Original_ИД_задачи, Original_ИД_компании, Original_НаправлениеЗадачи, Original_СтатусЗадачи, Original_ЦенаЗадачи, Original_ОписаниеЗадачи, Original_НазваниеЗадачи, Original_ИД_задачи);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class КомпанияTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public КомпанияTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Компания";
            tableMapping.ColumnMappings.Add("ИД_компании", "ИД_компании");
            tableMapping.ColumnMappings.Add("НазваниеКомпании", "НазваниеКомпании");
            tableMapping.ColumnMappings.Add("СфераДеятельности", "СфераДеятельности");
            tableMapping.ColumnMappings.Add("ТелефонКомпании", "ТелефонКомпании");
            tableMapping.ColumnMappings.Add("EmailКомпании", "EmailКомпании");
            tableMapping.ColumnMappings.Add("ОписаниеКомпании", "ОписаниеКомпании");
            tableMapping.ColumnMappings.Add("ЛогинКомпании", "ЛогинКомпании");
            tableMapping.ColumnMappings.Add("ПарольКомпании", "ПарольКомпании");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Компания] WHERE (([ИД_компании] = @Original_ИД_компании) AND ([НазваниеКомпании] = @Original_НазваниеКомпании) AND ([СфераДеятельности] = @Original_СфераДеятельности) AND ([ТелефонКомпании] = @Original_ТелефонКомпании) AND ([EmailКомпании] = @Original_EmailКомпании) AND ((@IsNull_ОписаниеКомпании = 1 AND [ОписаниеКомпании] IS NULL) OR ([ОписаниеКомпании] = @Original_ОписаниеКомпании)) AND ([ЛогинКомпании] = @Original_ЛогинКомпании) AND ([ПарольКомпании] = @Original_ПарольКомпании))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НазваниеКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СфераДеятельности", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СфераДеятельности", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ТелефонКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелефонКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ОписаниеКомпании", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКомпании", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ЛогинКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЛогинКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ПарольКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ПарольКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Компания] ([НазваниеКомпании], [СфераДеятельности], [ТелефонКомпании], [EmailКомпании], [ОписаниеКомпании], [ЛогинКомпании], [ПарольКомпании]) VALUES (@НазваниеКомпании, @СфераДеятельности, @ТелефонКомпании, @EmailКомпании, @ОписаниеКомпании, @ЛогинКомпании, @ПарольКомпании);
SELECT ИД_компании, НазваниеКомпании, СфераДеятельности, ТелефонКомпании, EmailКомпании, ОписаниеКомпании, ЛогинКомпании, ПарольКомпании FROM Компания WHERE (ИД_компании = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НазваниеКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СфераДеятельности", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СфераДеятельности", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ТелефонКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелефонКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ЛогинКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЛогинКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ПарольКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ПарольКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Компания] SET [НазваниеКомпании] = @НазваниеКомпании, [СфераДеятельности] = @СфераДеятельности, [ТелефонКомпании] = @ТелефонКомпании, [EmailКомпании] = @EmailКомпании, [ОписаниеКомпании] = @ОписаниеКомпании, [ЛогинКомпании] = @ЛогинКомпании, [ПарольКомпании] = @ПарольКомпании WHERE (([ИД_компании] = @Original_ИД_компании) AND ([НазваниеКомпании] = @Original_НазваниеКомпании) AND ([СфераДеятельности] = @Original_СфераДеятельности) AND ([ТелефонКомпании] = @Original_ТелефонКомпании) AND ([EmailКомпании] = @Original_EmailКомпании) AND ((@IsNull_ОписаниеКомпании = 1 AND [ОписаниеКомпании] IS NULL) OR ([ОписаниеКомпании] = @Original_ОписаниеКомпании)) AND ([ЛогинКомпании] = @Original_ЛогинКомпании) AND ([ПарольКомпании] = @Original_ПарольКомпании));
SELECT ИД_компании, НазваниеКомпании, СфераДеятельности, ТелефонКомпании, EmailКомпании, ОписаниеКомпании, ЛогинКомпании, ПарольКомпании FROM Компания WHERE (ИД_компании = @ИД_компании)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НазваниеКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СфераДеятельности", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СфераДеятельности", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ТелефонКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелефонКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ЛогинКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЛогинКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ПарольКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ПарольКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НазваниеКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СфераДеятельности", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СфераДеятельности", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ТелефонКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелефонКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ОписаниеКомпании", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКомпании", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ЛогинКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЛогинКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ПарольКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ПарольКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_компании", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApp1.Properties.Settings.Default.Uni3ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ИД_компании, НазваниеКомпании, СфераДеятельности, ТелефонКомпании, EmailКо" +
                "мпании, ОписаниеКомпании, ЛогинКомпании, ПарольКомпании FROM dbo.Компания";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Uni3DataSet.КомпанияDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Uni3DataSet.КомпанияDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Uni3DataSet.КомпанияDataTable dataTable = new Uni3DataSet.КомпанияDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet.КомпанияDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet dataSet) {
            return this.Adapter.Update(dataSet, "Компания");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_ИД_компании, string Original_НазваниеКомпании, string Original_СфераДеятельности, string Original_ТелефонКомпании, string Original_EmailКомпании, string Original_ОписаниеКомпании, string Original_ЛогинКомпании, string Original_ПарольКомпании) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_ИД_компании));
            if ((Original_НазваниеКомпании == null)) {
                throw new global::System.ArgumentNullException("Original_НазваниеКомпании");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_НазваниеКомпании));
            }
            if ((Original_СфераДеятельности == null)) {
                throw new global::System.ArgumentNullException("Original_СфераДеятельности");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_СфераДеятельности));
            }
            if ((Original_ТелефонКомпании == null)) {
                throw new global::System.ArgumentNullException("Original_ТелефонКомпании");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_ТелефонКомпании));
            }
            if ((Original_EmailКомпании == null)) {
                throw new global::System.ArgumentNullException("Original_EmailКомпании");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_EmailКомпании));
            }
            if ((Original_ОписаниеКомпании == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ОписаниеКомпании));
            }
            if ((Original_ЛогинКомпании == null)) {
                throw new global::System.ArgumentNullException("Original_ЛогинКомпании");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_ЛогинКомпании));
            }
            if ((Original_ПарольКомпании == null)) {
                throw new global::System.ArgumentNullException("Original_ПарольКомпании");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_ПарольКомпании));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string НазваниеКомпании, string СфераДеятельности, string ТелефонКомпании, string EmailКомпании, string ОписаниеКомпании, string ЛогинКомпании, string ПарольКомпании) {
            if ((НазваниеКомпании == null)) {
                throw new global::System.ArgumentNullException("НазваниеКомпании");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(НазваниеКомпании));
            }
            if ((СфераДеятельности == null)) {
                throw new global::System.ArgumentNullException("СфераДеятельности");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(СфераДеятельности));
            }
            if ((ТелефонКомпании == null)) {
                throw new global::System.ArgumentNullException("ТелефонКомпании");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ТелефонКомпании));
            }
            if ((EmailКомпании == null)) {
                throw new global::System.ArgumentNullException("EmailКомпании");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(EmailКомпании));
            }
            if ((ОписаниеКомпании == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ОписаниеКомпании));
            }
            if ((ЛогинКомпании == null)) {
                throw new global::System.ArgumentNullException("ЛогинКомпании");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ЛогинКомпании));
            }
            if ((ПарольКомпании == null)) {
                throw new global::System.ArgumentNullException("ПарольКомпании");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ПарольКомпании));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string НазваниеКомпании, 
                    string СфераДеятельности, 
                    string ТелефонКомпании, 
                    string EmailКомпании, 
                    string ОписаниеКомпании, 
                    string ЛогинКомпании, 
                    string ПарольКомпании, 
                    decimal Original_ИД_компании, 
                    string Original_НазваниеКомпании, 
                    string Original_СфераДеятельности, 
                    string Original_ТелефонКомпании, 
                    string Original_EmailКомпании, 
                    string Original_ОписаниеКомпании, 
                    string Original_ЛогинКомпании, 
                    string Original_ПарольКомпании, 
                    decimal ИД_компании) {
            if ((НазваниеКомпании == null)) {
                throw new global::System.ArgumentNullException("НазваниеКомпании");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(НазваниеКомпании));
            }
            if ((СфераДеятельности == null)) {
                throw new global::System.ArgumentNullException("СфераДеятельности");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(СфераДеятельности));
            }
            if ((ТелефонКомпании == null)) {
                throw new global::System.ArgumentNullException("ТелефонКомпании");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ТелефонКомпании));
            }
            if ((EmailКомпании == null)) {
                throw new global::System.ArgumentNullException("EmailКомпании");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(EmailКомпании));
            }
            if ((ОписаниеКомпании == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ОписаниеКомпании));
            }
            if ((ЛогинКомпании == null)) {
                throw new global::System.ArgumentNullException("ЛогинКомпании");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ЛогинКомпании));
            }
            if ((ПарольКомпании == null)) {
                throw new global::System.ArgumentNullException("ПарольКомпании");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ПарольКомпании));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_ИД_компании));
            if ((Original_НазваниеКомпании == null)) {
                throw new global::System.ArgumentNullException("Original_НазваниеКомпании");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_НазваниеКомпании));
            }
            if ((Original_СфераДеятельности == null)) {
                throw new global::System.ArgumentNullException("Original_СфераДеятельности");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_СфераДеятельности));
            }
            if ((Original_ТелефонКомпании == null)) {
                throw new global::System.ArgumentNullException("Original_ТелефонКомпании");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_ТелефонКомпании));
            }
            if ((Original_EmailКомпании == null)) {
                throw new global::System.ArgumentNullException("Original_EmailКомпании");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_EmailКомпании));
            }
            if ((Original_ОписаниеКомпании == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_ОписаниеКомпании));
            }
            if ((Original_ЛогинКомпании == null)) {
                throw new global::System.ArgumentNullException("Original_ЛогинКомпании");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_ЛогинКомпании));
            }
            if ((Original_ПарольКомпании == null)) {
                throw new global::System.ArgumentNullException("Original_ПарольКомпании");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_ПарольКомпании));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(ИД_компании));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string НазваниеКомпании, string СфераДеятельности, string ТелефонКомпании, string EmailКомпании, string ОписаниеКомпании, string ЛогинКомпании, string ПарольКомпании, decimal Original_ИД_компании, string Original_НазваниеКомпании, string Original_СфераДеятельности, string Original_ТелефонКомпании, string Original_EmailКомпании, string Original_ОписаниеКомпании, string Original_ЛогинКомпании, string Original_ПарольКомпании) {
            return this.Update(НазваниеКомпании, СфераДеятельности, ТелефонКомпании, EmailКомпании, ОписаниеКомпании, ЛогинКомпании, ПарольКомпании, Original_ИД_компании, Original_НазваниеКомпании, Original_СфераДеятельности, Original_ТелефонКомпании, Original_EmailКомпании, Original_ОписаниеКомпании, Original_ЛогинКомпании, Original_ПарольКомпании, Original_ИД_компании);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ОтзывыКомпанииTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public ОтзывыКомпанииTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ОтзывыКомпании";
            tableMapping.ColumnMappings.Add("ИД_ОтзываКомпании", "ИД_ОтзываКомпании");
            tableMapping.ColumnMappings.Add("ИД_компании", "ИД_компании");
            tableMapping.ColumnMappings.Add("ИД_Студента", "ИД_Студента");
            tableMapping.ColumnMappings.Add("ОтзывКомпании", "ОтзывКомпании");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[ОтзывыКомпании] WHERE (([ИД_ОтзываКомпании] = @Original_ИД_ОтзываКомпании) AND ((@IsNull_ИД_компании = 1 AND [ИД_компании] IS NULL) OR ([ИД_компании] = @Original_ИД_компании)) AND ([ИД_Студента] = @Original_ИД_Студента) AND ([ОтзывКомпании] = @Original_ОтзывКомпании))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_ОтзываКомпании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_ОтзываКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ИД_компании", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОтзывКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОтзывКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ОтзывыКомпании] ([ИД_компании], [ИД_Студента], [ОтзывКомпании]) VALUES (@ИД_компании, @ИД_Студента, @ОтзывКомпании);
SELECT ИД_ОтзываКомпании, ИД_компании, ИД_Студента, ОтзывКомпании FROM ОтзывыКомпании WHERE (ИД_ОтзываКомпании = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОтзывКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОтзывКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ОтзывыКомпании] SET [ИД_компании] = @ИД_компании, [ИД_Студента] = @ИД_Студента, [ОтзывКомпании] = @ОтзывКомпании WHERE (([ИД_ОтзываКомпании] = @Original_ИД_ОтзываКомпании) AND ((@IsNull_ИД_компании = 1 AND [ИД_компании] IS NULL) OR ([ИД_компании] = @Original_ИД_компании)) AND ([ИД_Студента] = @Original_ИД_Студента) AND ([ОтзывКомпании] = @Original_ОтзывКомпании));
SELECT ИД_ОтзываКомпании, ИД_компании, ИД_Студента, ОтзывКомпании FROM ОтзывыКомпании WHERE (ИД_ОтзываКомпании = @ИД_ОтзываКомпании)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОтзывКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОтзывКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_ОтзываКомпании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_ОтзываКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ИД_компании", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОтзывКомпании", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОтзывКомпании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_ОтзываКомпании", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_ОтзываКомпании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApp1.Properties.Settings.Default.Uni3ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ИД_ОтзываКомпании, ИД_компании, ИД_Студента, ОтзывКомпании FROM dbo.Отзывы" +
                "Компании";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Uni3DataSet.ОтзывыКомпанииDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Uni3DataSet.ОтзывыКомпанииDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Uni3DataSet.ОтзывыКомпанииDataTable dataTable = new Uni3DataSet.ОтзывыКомпанииDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet.ОтзывыКомпанииDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet dataSet) {
            return this.Adapter.Update(dataSet, "ОтзывыКомпании");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_ИД_ОтзываКомпании, global::System.Nullable<decimal> Original_ИД_компании, decimal Original_ИД_Студента, string Original_ОтзывКомпании) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_ИД_ОтзываКомпании));
            if ((Original_ИД_компании.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_ИД_компании.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_ИД_Студента));
            if ((Original_ОтзывКомпании == null)) {
                throw new global::System.ArgumentNullException("Original_ОтзывКомпании");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ОтзывКомпании));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<decimal> ИД_компании, decimal ИД_Студента, string ОтзывКомпании) {
            if ((ИД_компании.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(ИД_компании.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(ИД_Студента));
            if ((ОтзывКомпании == null)) {
                throw new global::System.ArgumentNullException("ОтзывКомпании");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ОтзывКомпании));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<decimal> ИД_компании, decimal ИД_Студента, string ОтзывКомпании, decimal Original_ИД_ОтзываКомпании, global::System.Nullable<decimal> Original_ИД_компании, decimal Original_ИД_Студента, string Original_ОтзывКомпании, decimal ИД_ОтзываКомпании) {
            if ((ИД_компании.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(ИД_компании.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(ИД_Студента));
            if ((ОтзывКомпании == null)) {
                throw new global::System.ArgumentNullException("ОтзывКомпании");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ОтзывКомпании));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Original_ИД_ОтзываКомпании));
            if ((Original_ИД_компании.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_ИД_компании.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_ИД_Студента));
            if ((Original_ОтзывКомпании == null)) {
                throw new global::System.ArgumentNullException("Original_ОтзывКомпании");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_ОтзывКомпании));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(ИД_ОтзываКомпании));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<decimal> ИД_компании, decimal ИД_Студента, string ОтзывКомпании, decimal Original_ИД_ОтзываКомпании, global::System.Nullable<decimal> Original_ИД_компании, decimal Original_ИД_Студента, string Original_ОтзывКомпании) {
            return this.Update(ИД_компании, ИД_Студента, ОтзывКомпании, Original_ИД_ОтзываКомпании, Original_ИД_компании, Original_ИД_Студента, Original_ОтзывКомпании, Original_ИД_ОтзываКомпании);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ОтзывыСтудентаTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public ОтзывыСтудентаTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ОтзывыСтудента";
            tableMapping.ColumnMappings.Add("ИД_ОтзываСтудента", "ИД_ОтзываСтудента");
            tableMapping.ColumnMappings.Add("ИД_Студента", "ИД_Студента");
            tableMapping.ColumnMappings.Add("ИД_компании", "ИД_компании");
            tableMapping.ColumnMappings.Add("ОтзывСтудента", "ОтзывСтудента");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ОтзывыСтудента] WHERE (([ИД_ОтзываСтудента] = @Original_ИД_Отз" +
                "ываСтудента) AND ([ИД_Студента] = @Original_ИД_Студента) AND ([ИД_компании] = @O" +
                "riginal_ИД_компании) AND ([ОтзывСтудента] = @Original_ОтзывСтудента))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_ОтзываСтудента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_ОтзываСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОтзывСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОтзывСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ОтзывыСтудента] ([ИД_Студента], [ИД_компании], [ОтзывСтудента]) VALUES (@ИД_Студента, @ИД_компании, @ОтзывСтудента);
SELECT ИД_ОтзываСтудента, ИД_Студента, ИД_компании, ОтзывСтудента FROM ОтзывыСтудента WHERE (ИД_ОтзываСтудента = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОтзывСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОтзывСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ОтзывыСтудента] SET [ИД_Студента] = @ИД_Студента, [ИД_компании] = @ИД_компании, [ОтзывСтудента] = @ОтзывСтудента WHERE (([ИД_ОтзываСтудента] = @Original_ИД_ОтзываСтудента) AND ([ИД_Студента] = @Original_ИД_Студента) AND ([ИД_компании] = @Original_ИД_компании) AND ([ОтзывСтудента] = @Original_ОтзывСтудента));
SELECT ИД_ОтзываСтудента, ИД_Студента, ИД_компании, ОтзывСтудента FROM ОтзывыСтудента WHERE (ИД_ОтзываСтудента = @ИД_ОтзываСтудента)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОтзывСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОтзывСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_ОтзываСтудента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_ОтзываСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОтзывСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОтзывСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_ОтзываСтудента", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_ОтзываСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApp1.Properties.Settings.Default.Uni3ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ИД_ОтзываСтудента, ИД_Студента, ИД_компании, ОтзывСтудента FROM dbo.Отзывы" +
                "Студента";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Uni3DataSet.ОтзывыСтудентаDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Uni3DataSet.ОтзывыСтудентаDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Uni3DataSet.ОтзывыСтудентаDataTable dataTable = new Uni3DataSet.ОтзывыСтудентаDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet.ОтзывыСтудентаDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet dataSet) {
            return this.Adapter.Update(dataSet, "ОтзывыСтудента");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_ИД_ОтзываСтудента, decimal Original_ИД_Студента, decimal Original_ИД_компании, string Original_ОтзывСтудента) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_ИД_ОтзываСтудента));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_ИД_Студента));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_ИД_компании));
            if ((Original_ОтзывСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_ОтзывСтудента");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_ОтзывСтудента));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal ИД_Студента, decimal ИД_компании, string ОтзывСтудента) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(ИД_Студента));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(ИД_компании));
            if ((ОтзывСтудента == null)) {
                throw new global::System.ArgumentNullException("ОтзывСтудента");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ОтзывСтудента));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal ИД_Студента, decimal ИД_компании, string ОтзывСтудента, decimal Original_ИД_ОтзываСтудента, decimal Original_ИД_Студента, decimal Original_ИД_компании, string Original_ОтзывСтудента, decimal ИД_ОтзываСтудента) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(ИД_Студента));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(ИД_компании));
            if ((ОтзывСтудента == null)) {
                throw new global::System.ArgumentNullException("ОтзывСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ОтзывСтудента));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Original_ИД_ОтзываСтудента));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Original_ИД_Студента));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_ИД_компании));
            if ((Original_ОтзывСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_ОтзывСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_ОтзывСтудента));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(ИД_ОтзываСтудента));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal ИД_Студента, decimal ИД_компании, string ОтзывСтудента, decimal Original_ИД_ОтзываСтудента, decimal Original_ИД_Студента, decimal Original_ИД_компании, string Original_ОтзывСтудента) {
            return this.Update(ИД_Студента, ИД_компании, ОтзывСтудента, Original_ИД_ОтзываСтудента, Original_ИД_Студента, Original_ИД_компании, Original_ОтзывСтудента, Original_ИД_ОтзываСтудента);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ПроблемаTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public ПроблемаTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Проблема";
            tableMapping.ColumnMappings.Add("ИД_Проблемы", "ИД_Проблемы");
            tableMapping.ColumnMappings.Add("ИД_компании", "ИД_компании");
            tableMapping.ColumnMappings.Add("НаправлениеПроблемы", "НаправлениеПроблемы");
            tableMapping.ColumnMappings.Add("ЦенаПроблемы", "ЦенаПроблемы");
            tableMapping.ColumnMappings.Add("СтатусПроблемы", "СтатусПроблемы");
            tableMapping.ColumnMappings.Add("ОписаниеПроблемы", "ОписаниеПроблемы");
            tableMapping.ColumnMappings.Add("НазваниеПроблемы", "НазваниеПроблемы");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Проблема] WHERE (([ИД_Проблемы] = @Original_ИД_Проблемы) AND ((@IsNull_ИД_компании = 1 AND [ИД_компании] IS NULL) OR ([ИД_компании] = @Original_ИД_компании)) AND ([НаправлениеПроблемы] = @Original_НаправлениеПроблемы) AND ([ЦенаПроблемы] = @Original_ЦенаПроблемы) AND ([СтатусПроблемы] = @Original_СтатусПроблемы) AND ([ОписаниеПроблемы] = @Original_ОписаниеПроблемы) AND ([НазваниеПроблемы] = @Original_НазваниеПроблемы))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Проблемы", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Проблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ИД_компании", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НаправлениеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаправлениеПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ЦенаПроблемы", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЦенаПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СтатусПроблемы", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НазваниеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Проблема] ([ИД_компании], [НаправлениеПроблемы], [ЦенаПроблемы], [СтатусПроблемы], [ОписаниеПроблемы], [НазваниеПроблемы]) VALUES (@ИД_компании, @НаправлениеПроблемы, @ЦенаПроблемы, @СтатусПроблемы, @ОписаниеПроблемы, @НазваниеПроблемы);
SELECT ИД_Проблемы, ИД_компании, НаправлениеПроблемы, ЦенаПроблемы, СтатусПроблемы, ОписаниеПроблемы, НазваниеПроблемы FROM Проблема WHERE (ИД_Проблемы = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НаправлениеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаправлениеПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ЦенаПроблемы", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЦенаПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СтатусПроблемы", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НазваниеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Проблема] SET [ИД_компании] = @ИД_компании, [НаправлениеПроблемы] = @НаправлениеПроблемы, [ЦенаПроблемы] = @ЦенаПроблемы, [СтатусПроблемы] = @СтатусПроблемы, [ОписаниеПроблемы] = @ОписаниеПроблемы, [НазваниеПроблемы] = @НазваниеПроблемы WHERE (([ИД_Проблемы] = @Original_ИД_Проблемы) AND ((@IsNull_ИД_компании = 1 AND [ИД_компании] IS NULL) OR ([ИД_компании] = @Original_ИД_компании)) AND ([НаправлениеПроблемы] = @Original_НаправлениеПроблемы) AND ([ЦенаПроблемы] = @Original_ЦенаПроблемы) AND ([СтатусПроблемы] = @Original_СтатусПроблемы) AND ([ОписаниеПроблемы] = @Original_ОписаниеПроблемы) AND ([НазваниеПроблемы] = @Original_НазваниеПроблемы));
SELECT ИД_Проблемы, ИД_компании, НаправлениеПроблемы, ЦенаПроблемы, СтатусПроблемы, ОписаниеПроблемы, НазваниеПроблемы FROM Проблема WHERE (ИД_Проблемы = @ИД_Проблемы)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НаправлениеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаправлениеПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ЦенаПроблемы", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЦенаПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СтатусПроблемы", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НазваниеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Проблемы", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Проблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ИД_компании", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_компании", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_компании", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НаправлениеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаправлениеПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ЦенаПроблемы", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЦенаПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СтатусПроблемы", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НазваниеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_Проблемы", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Проблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApp1.Properties.Settings.Default.Uni3ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ИД_Проблемы, ИД_компании, НаправлениеПроблемы, ЦенаПроблемы, СтатусПроблем" +
                "ы, ОписаниеПроблемы, НазваниеПроблемы FROM dbo.Проблема";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Uni3DataSet.ПроблемаDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Uni3DataSet.ПроблемаDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Uni3DataSet.ПроблемаDataTable dataTable = new Uni3DataSet.ПроблемаDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet.ПроблемаDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet dataSet) {
            return this.Adapter.Update(dataSet, "Проблема");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_ИД_Проблемы, global::System.Nullable<decimal> Original_ИД_компании, string Original_НаправлениеПроблемы, double Original_ЦенаПроблемы, bool Original_СтатусПроблемы, string Original_ОписаниеПроблемы, string Original_НазваниеПроблемы) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_ИД_Проблемы));
            if ((Original_ИД_компании.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_ИД_компании.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_НаправлениеПроблемы == null)) {
                throw new global::System.ArgumentNullException("Original_НаправлениеПроблемы");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_НаправлениеПроблемы));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_ЦенаПроблемы));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_СтатусПроблемы));
            if ((Original_ОписаниеПроблемы == null)) {
                throw new global::System.ArgumentNullException("Original_ОписаниеПроблемы");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ОписаниеПроблемы));
            }
            if ((Original_НазваниеПроблемы == null)) {
                throw new global::System.ArgumentNullException("Original_НазваниеПроблемы");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_НазваниеПроблемы));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<decimal> ИД_компании, string НаправлениеПроблемы, double ЦенаПроблемы, bool СтатусПроблемы, string ОписаниеПроблемы, string НазваниеПроблемы) {
            if ((ИД_компании.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(ИД_компании.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((НаправлениеПроблемы == null)) {
                throw new global::System.ArgumentNullException("НаправлениеПроблемы");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(НаправлениеПроблемы));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((double)(ЦенаПроблемы));
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(СтатусПроблемы));
            if ((ОписаниеПроблемы == null)) {
                throw new global::System.ArgumentNullException("ОписаниеПроблемы");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ОписаниеПроблемы));
            }
            if ((НазваниеПроблемы == null)) {
                throw new global::System.ArgumentNullException("НазваниеПроблемы");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(НазваниеПроблемы));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<decimal> ИД_компании, string НаправлениеПроблемы, double ЦенаПроблемы, bool СтатусПроблемы, string ОписаниеПроблемы, string НазваниеПроблемы, decimal Original_ИД_Проблемы, global::System.Nullable<decimal> Original_ИД_компании, string Original_НаправлениеПроблемы, double Original_ЦенаПроблемы, bool Original_СтатусПроблемы, string Original_ОписаниеПроблемы, string Original_НазваниеПроблемы, decimal ИД_Проблемы) {
            if ((ИД_компании.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(ИД_компании.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((НаправлениеПроблемы == null)) {
                throw new global::System.ArgumentNullException("НаправлениеПроблемы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(НаправлениеПроблемы));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(ЦенаПроблемы));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(СтатусПроблемы));
            if ((ОписаниеПроблемы == null)) {
                throw new global::System.ArgumentNullException("ОписаниеПроблемы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ОписаниеПроблемы));
            }
            if ((НазваниеПроблемы == null)) {
                throw new global::System.ArgumentNullException("НазваниеПроблемы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(НазваниеПроблемы));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_ИД_Проблемы));
            if ((Original_ИД_компании.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_ИД_компании.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_НаправлениеПроблемы == null)) {
                throw new global::System.ArgumentNullException("Original_НаправлениеПроблемы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_НаправлениеПроблемы));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(Original_ЦенаПроблемы));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Original_СтатусПроблемы));
            if ((Original_ОписаниеПроблемы == null)) {
                throw new global::System.ArgumentNullException("Original_ОписаниеПроблемы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_ОписаниеПроблемы));
            }
            if ((Original_НазваниеПроблемы == null)) {
                throw new global::System.ArgumentNullException("Original_НазваниеПроблемы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_НазваниеПроблемы));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(ИД_Проблемы));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<decimal> ИД_компании, string НаправлениеПроблемы, double ЦенаПроблемы, bool СтатусПроблемы, string ОписаниеПроблемы, string НазваниеПроблемы, decimal Original_ИД_Проблемы, global::System.Nullable<decimal> Original_ИД_компании, string Original_НаправлениеПроблемы, double Original_ЦенаПроблемы, bool Original_СтатусПроблемы, string Original_ОписаниеПроблемы, string Original_НазваниеПроблемы) {
            return this.Update(ИД_компании, НаправлениеПроблемы, ЦенаПроблемы, СтатусПроблемы, ОписаниеПроблемы, НазваниеПроблемы, Original_ИД_Проблемы, Original_ИД_компании, Original_НаправлениеПроблемы, Original_ЦенаПроблемы, Original_СтатусПроблемы, Original_ОписаниеПроблемы, Original_НазваниеПроблемы, Original_ИД_Проблемы);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class РешениеЗадачиTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public РешениеЗадачиTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "РешениеЗадачи";
            tableMapping.ColumnMappings.Add("ИД_РешенияЗадачи", "ИД_РешенияЗадачи");
            tableMapping.ColumnMappings.Add("ИД_задачи", "ИД_задачи");
            tableMapping.ColumnMappings.Add("ИД_Студента", "ИД_Студента");
            tableMapping.ColumnMappings.Add("ДатаРешенияЗадачи", "ДатаРешенияЗадачи");
            tableMapping.ColumnMappings.Add("СтатусРешенияЗадачи", "СтатусРешенияЗадачи");
            tableMapping.ColumnMappings.Add("КомментарийКРешениюЗадачи", "КомментарийКРешениюЗадачи");
            tableMapping.ColumnMappings.Add("СсылкаНаРешениеЗадачи", "СсылкаНаРешениеЗадачи");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[РешениеЗадачи] WHERE (([ИД_РешенияЗадачи] = @Original_ИД_РешенияЗадачи) AND ([ИД_задачи] = @Original_ИД_задачи) AND ((@IsNull_ИД_Студента = 1 AND [ИД_Студента] IS NULL) OR ([ИД_Студента] = @Original_ИД_Студента)) AND ([ДатаРешенияЗадачи] = @Original_ДатаРешенияЗадачи) AND ([СтатусРешенияЗадачи] = @Original_СтатусРешенияЗадачи) AND ([КомментарийКРешениюЗадачи] = @Original_КомментарийКРешениюЗадачи) AND ([СсылкаНаРешениеЗадачи] = @Original_СсылкаНаРешениеЗадачи))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_РешенияЗадачи", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_РешенияЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_задачи", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_задачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ИД_Студента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИД_Студента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаРешенияЗадачи", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаРешенияЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СтатусРешенияЗадачи", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусРешенияЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_КомментарийКРешениюЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КомментарийКРешениюЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СсылкаНаРешениеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СсылкаНаРешениеЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[РешениеЗадачи] ([ИД_задачи], [ИД_Студента], [ДатаРешенияЗадачи], [СтатусРешенияЗадачи], [КомментарийКРешениюЗадачи], [СсылкаНаРешениеЗадачи]) VALUES (@ИД_задачи, @ИД_Студента, @ДатаРешенияЗадачи, @СтатусРешенияЗадачи, @КомментарийКРешениюЗадачи, @СсылкаНаРешениеЗадачи);
SELECT ИД_РешенияЗадачи, ИД_задачи, ИД_Студента, ДатаРешенияЗадачи, СтатусРешенияЗадачи, КомментарийКРешениюЗадачи, СсылкаНаРешениеЗадачи FROM РешениеЗадачи WHERE (ИД_РешенияЗадачи = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_задачи", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_задачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаРешенияЗадачи", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаРешенияЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СтатусРешенияЗадачи", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусРешенияЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@КомментарийКРешениюЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КомментарийКРешениюЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СсылкаНаРешениеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СсылкаНаРешениеЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[РешениеЗадачи] SET [ИД_задачи] = @ИД_задачи, [ИД_Студента] = @ИД_Студента, [ДатаРешенияЗадачи] = @ДатаРешенияЗадачи, [СтатусРешенияЗадачи] = @СтатусРешенияЗадачи, [КомментарийКРешениюЗадачи] = @КомментарийКРешениюЗадачи, [СсылкаНаРешениеЗадачи] = @СсылкаНаРешениеЗадачи WHERE (([ИД_РешенияЗадачи] = @Original_ИД_РешенияЗадачи) AND ([ИД_задачи] = @Original_ИД_задачи) AND ((@IsNull_ИД_Студента = 1 AND [ИД_Студента] IS NULL) OR ([ИД_Студента] = @Original_ИД_Студента)) AND ([ДатаРешенияЗадачи] = @Original_ДатаРешенияЗадачи) AND ([СтатусРешенияЗадачи] = @Original_СтатусРешенияЗадачи) AND ([КомментарийКРешениюЗадачи] = @Original_КомментарийКРешениюЗадачи) AND ([СсылкаНаРешениеЗадачи] = @Original_СсылкаНаРешениеЗадачи));
SELECT ИД_РешенияЗадачи, ИД_задачи, ИД_Студента, ДатаРешенияЗадачи, СтатусРешенияЗадачи, КомментарийКРешениюЗадачи, СсылкаНаРешениеЗадачи FROM РешениеЗадачи WHERE (ИД_РешенияЗадачи = @ИД_РешенияЗадачи)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_задачи", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_задачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаРешенияЗадачи", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаРешенияЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СтатусРешенияЗадачи", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусРешенияЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@КомментарийКРешениюЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КомментарийКРешениюЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СсылкаНаРешениеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СсылкаНаРешениеЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_РешенияЗадачи", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_РешенияЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_задачи", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_задачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ИД_Студента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИД_Студента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаРешенияЗадачи", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаРешенияЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СтатусРешенияЗадачи", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусРешенияЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_КомментарийКРешениюЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КомментарийКРешениюЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СсылкаНаРешениеЗадачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СсылкаНаРешениеЗадачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_РешенияЗадачи", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_РешенияЗадачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApp1.Properties.Settings.Default.Uni3ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ИД_РешенияЗадачи, ИД_задачи, ИД_Студента, ДатаРешенияЗадачи, СтатусРешения" +
                "Задачи, КомментарийКРешениюЗадачи, СсылкаНаРешениеЗадачи FROM dbo.РешениеЗадачи";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Uni3DataSet.РешениеЗадачиDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Uni3DataSet.РешениеЗадачиDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Uni3DataSet.РешениеЗадачиDataTable dataTable = new Uni3DataSet.РешениеЗадачиDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet.РешениеЗадачиDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet dataSet) {
            return this.Adapter.Update(dataSet, "РешениеЗадачи");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_ИД_РешенияЗадачи, decimal Original_ИД_задачи, global::System.Nullable<decimal> Original_ИД_Студента, System.DateTime Original_ДатаРешенияЗадачи, bool Original_СтатусРешенияЗадачи, string Original_КомментарийКРешениюЗадачи, string Original_СсылкаНаРешениеЗадачи) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_ИД_РешенияЗадачи));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_ИД_задачи));
            if ((Original_ИД_Студента.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_ИД_Студента.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_ДатаРешенияЗадачи));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_СтатусРешенияЗадачи));
            if ((Original_КомментарийКРешениюЗадачи == null)) {
                throw new global::System.ArgumentNullException("Original_КомментарийКРешениюЗадачи");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_КомментарийКРешениюЗадачи));
            }
            if ((Original_СсылкаНаРешениеЗадачи == null)) {
                throw new global::System.ArgumentNullException("Original_СсылкаНаРешениеЗадачи");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_СсылкаНаРешениеЗадачи));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal ИД_задачи, global::System.Nullable<decimal> ИД_Студента, System.DateTime ДатаРешенияЗадачи, bool СтатусРешенияЗадачи, string КомментарийКРешениюЗадачи, string СсылкаНаРешениеЗадачи) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(ИД_задачи));
            if ((ИД_Студента.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(ИД_Студента.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(ДатаРешенияЗадачи));
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(СтатусРешенияЗадачи));
            if ((КомментарийКРешениюЗадачи == null)) {
                throw new global::System.ArgumentNullException("КомментарийКРешениюЗадачи");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(КомментарийКРешениюЗадачи));
            }
            if ((СсылкаНаРешениеЗадачи == null)) {
                throw new global::System.ArgumentNullException("СсылкаНаРешениеЗадачи");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(СсылкаНаРешениеЗадачи));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal ИД_задачи, global::System.Nullable<decimal> ИД_Студента, System.DateTime ДатаРешенияЗадачи, bool СтатусРешенияЗадачи, string КомментарийКРешениюЗадачи, string СсылкаНаРешениеЗадачи, decimal Original_ИД_РешенияЗадачи, decimal Original_ИД_задачи, global::System.Nullable<decimal> Original_ИД_Студента, System.DateTime Original_ДатаРешенияЗадачи, bool Original_СтатусРешенияЗадачи, string Original_КомментарийКРешениюЗадачи, string Original_СсылкаНаРешениеЗадачи, decimal ИД_РешенияЗадачи) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(ИД_задачи));
            if ((ИД_Студента.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(ИД_Студента.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(ДатаРешенияЗадачи));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(СтатусРешенияЗадачи));
            if ((КомментарийКРешениюЗадачи == null)) {
                throw new global::System.ArgumentNullException("КомментарийКРешениюЗадачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(КомментарийКРешениюЗадачи));
            }
            if ((СсылкаНаРешениеЗадачи == null)) {
                throw new global::System.ArgumentNullException("СсылкаНаРешениеЗадачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(СсылкаНаРешениеЗадачи));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_ИД_РешенияЗадачи));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_ИД_задачи));
            if ((Original_ИД_Студента.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_ИД_Студента.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(Original_ДатаРешенияЗадачи));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Original_СтатусРешенияЗадачи));
            if ((Original_КомментарийКРешениюЗадачи == null)) {
                throw new global::System.ArgumentNullException("Original_КомментарийКРешениюЗадачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_КомментарийКРешениюЗадачи));
            }
            if ((Original_СсылкаНаРешениеЗадачи == null)) {
                throw new global::System.ArgumentNullException("Original_СсылкаНаРешениеЗадачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_СсылкаНаРешениеЗадачи));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(ИД_РешенияЗадачи));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal ИД_задачи, global::System.Nullable<decimal> ИД_Студента, System.DateTime ДатаРешенияЗадачи, bool СтатусРешенияЗадачи, string КомментарийКРешениюЗадачи, string СсылкаНаРешениеЗадачи, decimal Original_ИД_РешенияЗадачи, decimal Original_ИД_задачи, global::System.Nullable<decimal> Original_ИД_Студента, System.DateTime Original_ДатаРешенияЗадачи, bool Original_СтатусРешенияЗадачи, string Original_КомментарийКРешениюЗадачи, string Original_СсылкаНаРешениеЗадачи) {
            return this.Update(ИД_задачи, ИД_Студента, ДатаРешенияЗадачи, СтатусРешенияЗадачи, КомментарийКРешениюЗадачи, СсылкаНаРешениеЗадачи, Original_ИД_РешенияЗадачи, Original_ИД_задачи, Original_ИД_Студента, Original_ДатаРешенияЗадачи, Original_СтатусРешенияЗадачи, Original_КомментарийКРешениюЗадачи, Original_СсылкаНаРешениеЗадачи, Original_ИД_РешенияЗадачи);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class РешениеПроблемыTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public РешениеПроблемыTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "РешениеПроблемы";
            tableMapping.ColumnMappings.Add("ИД_решенияПроблемы", "ИД_решенияПроблемы");
            tableMapping.ColumnMappings.Add("ИД_Проблемы", "ИД_Проблемы");
            tableMapping.ColumnMappings.Add("ИД_Студента", "ИД_Студента");
            tableMapping.ColumnMappings.Add("ДатаРешенияПроблемы", "ДатаРешенияПроблемы");
            tableMapping.ColumnMappings.Add("СтатусРешенияПроблемы", "СтатусРешенияПроблемы");
            tableMapping.ColumnMappings.Add("КомментарийКРешениюПроблемы", "КомментарийКРешениюПроблемы");
            tableMapping.ColumnMappings.Add("СсылкаНаРешениеПроблемы", "СсылкаНаРешениеПроблемы");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[РешениеПроблемы] WHERE (([ИД_решенияПроблемы] = @Original_ИД_решенияПроблемы) AND ([ИД_Проблемы] = @Original_ИД_Проблемы) AND ([ИД_Студента] = @Original_ИД_Студента) AND ([ДатаРешенияПроблемы] = @Original_ДатаРешенияПроблемы) AND ([СтатусРешенияПроблемы] = @Original_СтатусРешенияПроблемы) AND ([КомментарийКРешениюПроблемы] = @Original_КомментарийКРешениюПроблемы) AND ([СсылкаНаРешениеПроблемы] = @Original_СсылкаНаРешениеПроблемы))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_решенияПроблемы", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_решенияПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Проблемы", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Проблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаРешенияПроблемы", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаРешенияПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СтатусРешенияПроблемы", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусРешенияПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_КомментарийКРешениюПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КомментарийКРешениюПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СсылкаНаРешениеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СсылкаНаРешениеПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[РешениеПроблемы] ([ИД_Проблемы], [ИД_Студента], [ДатаРешенияПроблемы], [СтатусРешенияПроблемы], [КомментарийКРешениюПроблемы], [СсылкаНаРешениеПроблемы]) VALUES (@ИД_Проблемы, @ИД_Студента, @ДатаРешенияПроблемы, @СтатусРешенияПроблемы, @КомментарийКРешениюПроблемы, @СсылкаНаРешениеПроблемы);
SELECT ИД_решенияПроблемы, ИД_Проблемы, ИД_Студента, ДатаРешенияПроблемы, СтатусРешенияПроблемы, КомментарийКРешениюПроблемы, СсылкаНаРешениеПроблемы FROM РешениеПроблемы WHERE (ИД_решенияПроблемы = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_Проблемы", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Проблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаРешенияПроблемы", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаРешенияПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СтатусРешенияПроблемы", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусРешенияПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@КомментарийКРешениюПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КомментарийКРешениюПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СсылкаНаРешениеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СсылкаНаРешениеПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[РешениеПроблемы] SET [ИД_Проблемы] = @ИД_Проблемы, [ИД_Студента] = @ИД_Студента, [ДатаРешенияПроблемы] = @ДатаРешенияПроблемы, [СтатусРешенияПроблемы] = @СтатусРешенияПроблемы, [КомментарийКРешениюПроблемы] = @КомментарийКРешениюПроблемы, [СсылкаНаРешениеПроблемы] = @СсылкаНаРешениеПроблемы WHERE (([ИД_решенияПроблемы] = @Original_ИД_решенияПроблемы) AND ([ИД_Проблемы] = @Original_ИД_Проблемы) AND ([ИД_Студента] = @Original_ИД_Студента) AND ([ДатаРешенияПроблемы] = @Original_ДатаРешенияПроблемы) AND ([СтатусРешенияПроблемы] = @Original_СтатусРешенияПроблемы) AND ([КомментарийКРешениюПроблемы] = @Original_КомментарийКРешениюПроблемы) AND ([СсылкаНаРешениеПроблемы] = @Original_СсылкаНаРешениеПроблемы));
SELECT ИД_решенияПроблемы, ИД_Проблемы, ИД_Студента, ДатаРешенияПроблемы, СтатусРешенияПроблемы, КомментарийКРешениюПроблемы, СсылкаНаРешениеПроблемы FROM РешениеПроблемы WHERE (ИД_решенияПроблемы = @ИД_решенияПроблемы)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_Проблемы", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Проблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаРешенияПроблемы", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаРешенияПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СтатусРешенияПроблемы", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусРешенияПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@КомментарийКРешениюПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КомментарийКРешениюПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СсылкаНаРешениеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СсылкаНаРешениеПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_решенияПроблемы", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_решенияПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Проблемы", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Проблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаРешенияПроблемы", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаРешенияПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СтатусРешенияПроблемы", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтатусРешенияПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_КомментарийКРешениюПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КомментарийКРешениюПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СсылкаНаРешениеПроблемы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СсылкаНаРешениеПроблемы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_решенияПроблемы", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_решенияПроблемы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApp1.Properties.Settings.Default.Uni3ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ИД_решенияПроблемы, ИД_Проблемы, ИД_Студента, ДатаРешенияПроблемы, СтатусР" +
                "ешенияПроблемы, КомментарийКРешениюПроблемы, СсылкаНаРешениеПроблемы FROM dbo.Ре" +
                "шениеПроблемы";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Uni3DataSet.РешениеПроблемыDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Uni3DataSet.РешениеПроблемыDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Uni3DataSet.РешениеПроблемыDataTable dataTable = new Uni3DataSet.РешениеПроблемыDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet.РешениеПроблемыDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet dataSet) {
            return this.Adapter.Update(dataSet, "РешениеПроблемы");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_ИД_решенияПроблемы, decimal Original_ИД_Проблемы, decimal Original_ИД_Студента, System.DateTime Original_ДатаРешенияПроблемы, bool Original_СтатусРешенияПроблемы, string Original_КомментарийКРешениюПроблемы, string Original_СсылкаНаРешениеПроблемы) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_ИД_решенияПроблемы));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_ИД_Проблемы));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_ИД_Студента));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_ДатаРешенияПроблемы));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_СтатусРешенияПроблемы));
            if ((Original_КомментарийКРешениюПроблемы == null)) {
                throw new global::System.ArgumentNullException("Original_КомментарийКРешениюПроблемы");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_КомментарийКРешениюПроблемы));
            }
            if ((Original_СсылкаНаРешениеПроблемы == null)) {
                throw new global::System.ArgumentNullException("Original_СсылкаНаРешениеПроблемы");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_СсылкаНаРешениеПроблемы));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal ИД_Проблемы, decimal ИД_Студента, System.DateTime ДатаРешенияПроблемы, bool СтатусРешенияПроблемы, string КомментарийКРешениюПроблемы, string СсылкаНаРешениеПроблемы) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(ИД_Проблемы));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(ИД_Студента));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(ДатаРешенияПроблемы));
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(СтатусРешенияПроблемы));
            if ((КомментарийКРешениюПроблемы == null)) {
                throw new global::System.ArgumentNullException("КомментарийКРешениюПроблемы");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(КомментарийКРешениюПроблемы));
            }
            if ((СсылкаНаРешениеПроблемы == null)) {
                throw new global::System.ArgumentNullException("СсылкаНаРешениеПроблемы");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(СсылкаНаРешениеПроблемы));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal ИД_Проблемы, decimal ИД_Студента, System.DateTime ДатаРешенияПроблемы, bool СтатусРешенияПроблемы, string КомментарийКРешениюПроблемы, string СсылкаНаРешениеПроблемы, decimal Original_ИД_решенияПроблемы, decimal Original_ИД_Проблемы, decimal Original_ИД_Студента, System.DateTime Original_ДатаРешенияПроблемы, bool Original_СтатусРешенияПроблемы, string Original_КомментарийКРешениюПроблемы, string Original_СсылкаНаРешениеПроблемы, decimal ИД_решенияПроблемы) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(ИД_Проблемы));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(ИД_Студента));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(ДатаРешенияПроблемы));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(СтатусРешенияПроблемы));
            if ((КомментарийКРешениюПроблемы == null)) {
                throw new global::System.ArgumentNullException("КомментарийКРешениюПроблемы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(КомментарийКРешениюПроблемы));
            }
            if ((СсылкаНаРешениеПроблемы == null)) {
                throw new global::System.ArgumentNullException("СсылкаНаРешениеПроблемы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(СсылкаНаРешениеПроблемы));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_ИД_решенияПроблемы));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_ИД_Проблемы));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_ИД_Студента));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_ДатаРешенияПроблемы));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Original_СтатусРешенияПроблемы));
            if ((Original_КомментарийКРешениюПроблемы == null)) {
                throw new global::System.ArgumentNullException("Original_КомментарийКРешениюПроблемы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_КомментарийКРешениюПроблемы));
            }
            if ((Original_СсылкаНаРешениеПроблемы == null)) {
                throw new global::System.ArgumentNullException("Original_СсылкаНаРешениеПроблемы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_СсылкаНаРешениеПроблемы));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(ИД_решенияПроблемы));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal ИД_Проблемы, decimal ИД_Студента, System.DateTime ДатаРешенияПроблемы, bool СтатусРешенияПроблемы, string КомментарийКРешениюПроблемы, string СсылкаНаРешениеПроблемы, decimal Original_ИД_решенияПроблемы, decimal Original_ИД_Проблемы, decimal Original_ИД_Студента, System.DateTime Original_ДатаРешенияПроблемы, bool Original_СтатусРешенияПроблемы, string Original_КомментарийКРешениюПроблемы, string Original_СсылкаНаРешениеПроблемы) {
            return this.Update(ИД_Проблемы, ИД_Студента, ДатаРешенияПроблемы, СтатусРешенияПроблемы, КомментарийКРешениюПроблемы, СсылкаНаРешениеПроблемы, Original_ИД_решенияПроблемы, Original_ИД_Проблемы, Original_ИД_Студента, Original_ДатаРешенияПроблемы, Original_СтатусРешенияПроблемы, Original_КомментарийКРешениюПроблемы, Original_СсылкаНаРешениеПроблемы, Original_ИД_решенияПроблемы);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class СтудентTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public СтудентTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Студент";
            tableMapping.ColumnMappings.Add("ИД_Студента", "ИД_Студента");
            tableMapping.ColumnMappings.Add("ФИОСтудента", "ФИОСтудента");
            tableMapping.ColumnMappings.Add("Курс", "Курс");
            tableMapping.ColumnMappings.Add("Факультет", "Факультет");
            tableMapping.ColumnMappings.Add("Направление", "Направление");
            tableMapping.ColumnMappings.Add("EmailСтудента", "EmailСтудента");
            tableMapping.ColumnMappings.Add("ТелефонСтудента", "ТелефонСтудента");
            tableMapping.ColumnMappings.Add("НомерКартыСтудента", "НомерКартыСтудента");
            tableMapping.ColumnMappings.Add("ЛогинСтудента", "ЛогинСтудента");
            tableMapping.ColumnMappings.Add("ПарольСтудента", "ПарольСтудента");
            tableMapping.ColumnMappings.Add("ОбоМне", "ОбоМне");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Студент] WHERE (([ИД_Студента] = @Original_ИД_Студента) AND ([ФИОСтудента] = @Original_ФИОСтудента) AND ([Курс] = @Original_Курс) AND ([Факультет] = @Original_Факультет) AND ([Направление] = @Original_Направление) AND ([EmailСтудента] = @Original_EmailСтудента) AND ([ТелефонСтудента] = @Original_ТелефонСтудента) AND ([НомерКартыСтудента] = @Original_НомерКартыСтудента) AND ([ЛогинСтудента] = @Original_ЛогинСтудента) AND ([ПарольСтудента] = @Original_ПарольСтудента) AND ((@IsNull_ОбоМне = 1 AND [ОбоМне] IS NULL) OR ([ОбоМне] = @Original_ОбоМне)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Курс", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Курс", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Факультет", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Факультет", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Направление", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Направление", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ТелефонСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелефонСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерКартыСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерКартыСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ЛогинСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЛогинСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ПарольСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ПарольСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ОбоМне", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОбоМне", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОбоМне", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОбоМне", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Студент] ([ФИОСтудента], [Курс], [Факультет], [Направление], [EmailСтудента], [ТелефонСтудента], [НомерКартыСтудента], [ЛогинСтудента], [ПарольСтудента], [ОбоМне]) VALUES (@ФИОСтудента, @Курс, @Факультет, @Направление, @EmailСтудента, @ТелефонСтудента, @НомерКартыСтудента, @ЛогинСтудента, @ПарольСтудента, @ОбоМне);
SELECT ИД_Студента, ФИОСтудента, Курс, Факультет, Направление, EmailСтудента, ТелефонСтудента, НомерКартыСтудента, ЛогинСтудента, ПарольСтудента, ОбоМне FROM Студент WHERE (ИД_Студента = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Курс", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Курс", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Факультет", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Факультет", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Направление", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Направление", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ТелефонСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелефонСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерКартыСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерКартыСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ЛогинСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЛогинСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ПарольСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ПарольСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОбоМне", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОбоМне", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Студент] SET [ФИОСтудента] = @ФИОСтудента, [Курс] = @Курс, [Факультет] = @Факультет, [Направление] = @Направление, [EmailСтудента] = @EmailСтудента, [ТелефонСтудента] = @ТелефонСтудента, [НомерКартыСтудента] = @НомерКартыСтудента, [ЛогинСтудента] = @ЛогинСтудента, [ПарольСтудента] = @ПарольСтудента, [ОбоМне] = @ОбоМне WHERE (([ИД_Студента] = @Original_ИД_Студента) AND ([ФИОСтудента] = @Original_ФИОСтудента) AND ([Курс] = @Original_Курс) AND ([Факультет] = @Original_Факультет) AND ([Направление] = @Original_Направление) AND ([EmailСтудента] = @Original_EmailСтудента) AND ([ТелефонСтудента] = @Original_ТелефонСтудента) AND ([НомерКартыСтудента] = @Original_НомерКартыСтудента) AND ([ЛогинСтудента] = @Original_ЛогинСтудента) AND ([ПарольСтудента] = @Original_ПарольСтудента) AND ((@IsNull_ОбоМне = 1 AND [ОбоМне] IS NULL) OR ([ОбоМне] = @Original_ОбоМне)));
SELECT ИД_Студента, ФИОСтудента, Курс, Факультет, Направление, EmailСтудента, ТелефонСтудента, НомерКартыСтудента, ЛогинСтудента, ПарольСтудента, ОбоМне FROM Студент WHERE (ИД_Студента = @ИД_Студента)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Курс", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Курс", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Факультет", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Факультет", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Направление", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Направление", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ТелефонСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелефонСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерКартыСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерКартыСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ЛогинСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЛогинСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ПарольСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ПарольСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОбоМне", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОбоМне", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИД_Студента", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Курс", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Курс", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Факультет", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Факультет", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Направление", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Направление", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ТелефонСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелефонСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерКартыСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерКартыСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ЛогинСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ЛогинСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ПарольСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ПарольСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ОбоМне", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОбоМне", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОбоМне", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОбоМне", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИД_Студента", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 0, "ИД_Студента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApp1.Properties.Settings.Default.Uni3ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ИД_Студента, ФИОСтудента, Курс, Факультет, Направление, EmailСтудента, Тел" +
                "ефонСтудента, НомерКартыСтудента, ЛогинСтудента, ПарольСтудента, ОбоМне FROM dbo" +
                ".Студент";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Uni3DataSet.СтудентDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Uni3DataSet.СтудентDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Uni3DataSet.СтудентDataTable dataTable = new Uni3DataSet.СтудентDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet.СтудентDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Uni3DataSet dataSet) {
            return this.Adapter.Update(dataSet, "Студент");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_ИД_Студента, string Original_ФИОСтудента, int Original_Курс, string Original_Факультет, string Original_Направление, string Original_EmailСтудента, string Original_ТелефонСтудента, string Original_НомерКартыСтудента, string Original_ЛогинСтудента, string Original_ПарольСтудента, string Original_ОбоМне) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_ИД_Студента));
            if ((Original_ФИОСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_ФИОСтудента");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ФИОСтудента));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Курс));
            if ((Original_Факультет == null)) {
                throw new global::System.ArgumentNullException("Original_Факультет");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Факультет));
            }
            if ((Original_Направление == null)) {
                throw new global::System.ArgumentNullException("Original_Направление");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Направление));
            }
            if ((Original_EmailСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_EmailСтудента");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_EmailСтудента));
            }
            if ((Original_ТелефонСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_ТелефонСтудента");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ТелефонСтудента));
            }
            if ((Original_НомерКартыСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_НомерКартыСтудента");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_НомерКартыСтудента));
            }
            if ((Original_ЛогинСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_ЛогинСтудента");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_ЛогинСтудента));
            }
            if ((Original_ПарольСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_ПарольСтудента");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_ПарольСтудента));
            }
            if ((Original_ОбоМне == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_ОбоМне));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ФИОСтудента, int Курс, string Факультет, string Направление, string EmailСтудента, string ТелефонСтудента, string НомерКартыСтудента, string ЛогинСтудента, string ПарольСтудента, string ОбоМне) {
            if ((ФИОСтудента == null)) {
                throw new global::System.ArgumentNullException("ФИОСтудента");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ФИОСтудента));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Курс));
            if ((Факультет == null)) {
                throw new global::System.ArgumentNullException("Факультет");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Факультет));
            }
            if ((Направление == null)) {
                throw new global::System.ArgumentNullException("Направление");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Направление));
            }
            if ((EmailСтудента == null)) {
                throw new global::System.ArgumentNullException("EmailСтудента");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(EmailСтудента));
            }
            if ((ТелефонСтудента == null)) {
                throw new global::System.ArgumentNullException("ТелефонСтудента");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ТелефонСтудента));
            }
            if ((НомерКартыСтудента == null)) {
                throw new global::System.ArgumentNullException("НомерКартыСтудента");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(НомерКартыСтудента));
            }
            if ((ЛогинСтудента == null)) {
                throw new global::System.ArgumentNullException("ЛогинСтудента");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ЛогинСтудента));
            }
            if ((ПарольСтудента == null)) {
                throw new global::System.ArgumentNullException("ПарольСтудента");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(ПарольСтудента));
            }
            if ((ОбоМне == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ОбоМне));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ФИОСтудента, 
                    int Курс, 
                    string Факультет, 
                    string Направление, 
                    string EmailСтудента, 
                    string ТелефонСтудента, 
                    string НомерКартыСтудента, 
                    string ЛогинСтудента, 
                    string ПарольСтудента, 
                    string ОбоМне, 
                    decimal Original_ИД_Студента, 
                    string Original_ФИОСтудента, 
                    int Original_Курс, 
                    string Original_Факультет, 
                    string Original_Направление, 
                    string Original_EmailСтудента, 
                    string Original_ТелефонСтудента, 
                    string Original_НомерКартыСтудента, 
                    string Original_ЛогинСтудента, 
                    string Original_ПарольСтудента, 
                    string Original_ОбоМне, 
                    decimal ИД_Студента) {
            if ((ФИОСтудента == null)) {
                throw new global::System.ArgumentNullException("ФИОСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ФИОСтудента));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Курс));
            if ((Факультет == null)) {
                throw new global::System.ArgumentNullException("Факультет");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Факультет));
            }
            if ((Направление == null)) {
                throw new global::System.ArgumentNullException("Направление");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Направление));
            }
            if ((EmailСтудента == null)) {
                throw new global::System.ArgumentNullException("EmailСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(EmailСтудента));
            }
            if ((ТелефонСтудента == null)) {
                throw new global::System.ArgumentNullException("ТелефонСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ТелефонСтудента));
            }
            if ((НомерКартыСтудента == null)) {
                throw new global::System.ArgumentNullException("НомерКартыСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(НомерКартыСтудента));
            }
            if ((ЛогинСтудента == null)) {
                throw new global::System.ArgumentNullException("ЛогинСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ЛогинСтудента));
            }
            if ((ПарольСтудента == null)) {
                throw new global::System.ArgumentNullException("ПарольСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(ПарольСтудента));
            }
            if ((ОбоМне == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ОбоМне));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(Original_ИД_Студента));
            if ((Original_ФИОСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_ФИОСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_ФИОСтудента));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_Курс));
            if ((Original_Факультет == null)) {
                throw new global::System.ArgumentNullException("Original_Факультет");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Факультет));
            }
            if ((Original_Направление == null)) {
                throw new global::System.ArgumentNullException("Original_Направление");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_Направление));
            }
            if ((Original_EmailСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_EmailСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_EmailСтудента));
            }
            if ((Original_ТелефонСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_ТелефонСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_ТелефонСтудента));
            }
            if ((Original_НомерКартыСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_НомерКартыСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_НомерКартыСтудента));
            }
            if ((Original_ЛогинСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_ЛогинСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_ЛогинСтудента));
            }
            if ((Original_ПарольСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_ПарольСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_ПарольСтудента));
            }
            if ((Original_ОбоМне == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_ОбоМне));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(ИД_Студента));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ФИОСтудента, 
                    int Курс, 
                    string Факультет, 
                    string Направление, 
                    string EmailСтудента, 
                    string ТелефонСтудента, 
                    string НомерКартыСтудента, 
                    string ЛогинСтудента, 
                    string ПарольСтудента, 
                    string ОбоМне, 
                    decimal Original_ИД_Студента, 
                    string Original_ФИОСтудента, 
                    int Original_Курс, 
                    string Original_Факультет, 
                    string Original_Направление, 
                    string Original_EmailСтудента, 
                    string Original_ТелефонСтудента, 
                    string Original_НомерКартыСтудента, 
                    string Original_ЛогинСтудента, 
                    string Original_ПарольСтудента, 
                    string Original_ОбоМне) {
            return this.Update(ФИОСтудента, Курс, Факультет, Направление, EmailСтудента, ТелефонСтудента, НомерКартыСтудента, ЛогинСтудента, ПарольСтудента, ОбоМне, Original_ИД_Студента, Original_ФИОСтудента, Original_Курс, Original_Факультет, Original_Направление, Original_EmailСтудента, Original_ТелефонСтудента, Original_НомерКартыСтудента, Original_ЛогинСтудента, Original_ПарольСтудента, Original_ОбоМне, Original_ИД_Студента);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private ЗадачаTableAdapter _задачаTableAdapter;
        
        private КомпанияTableAdapter _компанияTableAdapter;
        
        private ОтзывыКомпанииTableAdapter _отзывыКомпанииTableAdapter;
        
        private ОтзывыСтудентаTableAdapter _отзывыСтудентаTableAdapter;
        
        private ПроблемаTableAdapter _проблемаTableAdapter;
        
        private РешениеЗадачиTableAdapter _решениеЗадачиTableAdapter;
        
        private РешениеПроблемыTableAdapter _решениеПроблемыTableAdapter;
        
        private СтудентTableAdapter _студентTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ЗадачаTableAdapter ЗадачаTableAdapter {
            get {
                return this._задачаTableAdapter;
            }
            set {
                this._задачаTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public КомпанияTableAdapter КомпанияTableAdapter {
            get {
                return this._компанияTableAdapter;
            }
            set {
                this._компанияTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ОтзывыКомпанииTableAdapter ОтзывыКомпанииTableAdapter {
            get {
                return this._отзывыКомпанииTableAdapter;
            }
            set {
                this._отзывыКомпанииTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ОтзывыСтудентаTableAdapter ОтзывыСтудентаTableAdapter {
            get {
                return this._отзывыСтудентаTableAdapter;
            }
            set {
                this._отзывыСтудентаTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ПроблемаTableAdapter ПроблемаTableAdapter {
            get {
                return this._проблемаTableAdapter;
            }
            set {
                this._проблемаTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public РешениеЗадачиTableAdapter РешениеЗадачиTableAdapter {
            get {
                return this._решениеЗадачиTableAdapter;
            }
            set {
                this._решениеЗадачиTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public РешениеПроблемыTableAdapter РешениеПроблемыTableAdapter {
            get {
                return this._решениеПроблемыTableAdapter;
            }
            set {
                this._решениеПроблемыTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public СтудентTableAdapter СтудентTableAdapter {
            get {
                return this._студентTableAdapter;
            }
            set {
                this._студентTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._задачаTableAdapter != null) 
                            && (this._задачаTableAdapter.Connection != null))) {
                    return this._задачаTableAdapter.Connection;
                }
                if (((this._компанияTableAdapter != null) 
                            && (this._компанияTableAdapter.Connection != null))) {
                    return this._компанияTableAdapter.Connection;
                }
                if (((this._отзывыКомпанииTableAdapter != null) 
                            && (this._отзывыКомпанииTableAdapter.Connection != null))) {
                    return this._отзывыКомпанииTableAdapter.Connection;
                }
                if (((this._отзывыСтудентаTableAdapter != null) 
                            && (this._отзывыСтудентаTableAdapter.Connection != null))) {
                    return this._отзывыСтудентаTableAdapter.Connection;
                }
                if (((this._проблемаTableAdapter != null) 
                            && (this._проблемаTableAdapter.Connection != null))) {
                    return this._проблемаTableAdapter.Connection;
                }
                if (((this._решениеЗадачиTableAdapter != null) 
                            && (this._решениеЗадачиTableAdapter.Connection != null))) {
                    return this._решениеЗадачиTableAdapter.Connection;
                }
                if (((this._решениеПроблемыTableAdapter != null) 
                            && (this._решениеПроблемыTableAdapter.Connection != null))) {
                    return this._решениеПроблемыTableAdapter.Connection;
                }
                if (((this._студентTableAdapter != null) 
                            && (this._студентTableAdapter.Connection != null))) {
                    return this._студентTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._задачаTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._компанияTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._отзывыКомпанииTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._отзывыСтудентаTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._проблемаTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._решениеЗадачиTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._решениеПроблемыTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._студентTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private int UpdateUpdatedRows(Uni3DataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._компанияTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Компания.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._компанияTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._задачаTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Задача.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._задачаTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._проблемаTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Проблема.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._проблемаTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._студентTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Студент.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._студентTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._отзывыКомпанииTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ОтзывыКомпании.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._отзывыКомпанииTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._отзывыСтудентаTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ОтзывыСтудента.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._отзывыСтудентаTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._решениеЗадачиTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.РешениеЗадачи.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._решениеЗадачиTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._решениеПроблемыTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.РешениеПроблемы.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._решениеПроблемыTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private int UpdateInsertedRows(Uni3DataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._компанияTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Компания.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._компанияTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._задачаTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Задача.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._задачаTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._проблемаTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Проблема.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._проблемаTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._студентTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Студент.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._студентTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._отзывыКомпанииTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ОтзывыКомпании.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._отзывыКомпанииTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._отзывыСтудентаTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ОтзывыСтудента.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._отзывыСтудентаTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._решениеЗадачиTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.РешениеЗадачи.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._решениеЗадачиTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._решениеПроблемыTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.РешениеПроблемы.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._решениеПроблемыTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private int UpdateDeletedRows(Uni3DataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._решениеПроблемыTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.РешениеПроблемы.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._решениеПроблемыTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._решениеЗадачиTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.РешениеЗадачи.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._решениеЗадачиTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._отзывыСтудентаTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ОтзывыСтудента.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._отзывыСтудентаTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._отзывыКомпанииTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ОтзывыКомпании.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._отзывыКомпанииTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._студентTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Студент.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._студентTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._проблемаTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Проблема.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._проблемаTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._задачаTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Задача.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._задачаTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._компанияTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Компания.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._компанияTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public virtual int UpdateAll(Uni3DataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._задачаTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._задачаTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._компанияTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._компанияTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._отзывыКомпанииTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._отзывыКомпанииTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._отзывыСтудентаTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._отзывыСтудентаTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._проблемаTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._проблемаTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._решениеЗадачиTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._решениеЗадачиTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._решениеПроблемыTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._решениеПроблемыTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._студентTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._студентTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager не содержит сведений о подключении. Укажите для каждого адапт" +
                        "ера таблицы TableAdapterManager допустимый экземпляр адаптера таблицы.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("Не удается начать транзакцию. Текущее соединение данных не поддерживает транзакци" +
                        "и или текущее состояние не позволяет начать транзакцию.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._задачаTableAdapter != null)) {
                    revertConnections.Add(this._задачаTableAdapter, this._задачаTableAdapter.Connection);
                    this._задачаTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._задачаTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._задачаTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._задачаTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._задачаTableAdapter.Adapter);
                    }
                }
                if ((this._компанияTableAdapter != null)) {
                    revertConnections.Add(this._компанияTableAdapter, this._компанияTableAdapter.Connection);
                    this._компанияTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._компанияTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._компанияTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._компанияTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._компанияTableAdapter.Adapter);
                    }
                }
                if ((this._отзывыКомпанииTableAdapter != null)) {
                    revertConnections.Add(this._отзывыКомпанииTableAdapter, this._отзывыКомпанииTableAdapter.Connection);
                    this._отзывыКомпанииTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._отзывыКомпанииTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._отзывыКомпанииTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._отзывыКомпанииTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._отзывыКомпанииTableAdapter.Adapter);
                    }
                }
                if ((this._отзывыСтудентаTableAdapter != null)) {
                    revertConnections.Add(this._отзывыСтудентаTableAdapter, this._отзывыСтудентаTableAdapter.Connection);
                    this._отзывыСтудентаTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._отзывыСтудентаTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._отзывыСтудентаTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._отзывыСтудентаTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._отзывыСтудентаTableAdapter.Adapter);
                    }
                }
                if ((this._проблемаTableAdapter != null)) {
                    revertConnections.Add(this._проблемаTableAdapter, this._проблемаTableAdapter.Connection);
                    this._проблемаTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._проблемаTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._проблемаTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._проблемаTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._проблемаTableAdapter.Adapter);
                    }
                }
                if ((this._решениеЗадачиTableAdapter != null)) {
                    revertConnections.Add(this._решениеЗадачиTableAdapter, this._решениеЗадачиTableAdapter.Connection);
                    this._решениеЗадачиTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._решениеЗадачиTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._решениеЗадачиTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._решениеЗадачиTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._решениеЗадачиTableAdapter.Adapter);
                    }
                }
                if ((this._решениеПроблемыTableAdapter != null)) {
                    revertConnections.Add(this._решениеПроблемыTableAdapter, this._решениеПроблемыTableAdapter.Connection);
                    this._решениеПроблемыTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._решениеПроблемыTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._решениеПроблемыTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._решениеПроблемыTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._решениеПроблемыTableAdapter.Adapter);
                    }
                }
                if ((this._студентTableAdapter != null)) {
                    revertConnections.Add(this._студентTableAdapter, this._студентTableAdapter.Connection);
                    this._студентTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._студентTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._студентTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._студентTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._студентTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._задачаTableAdapter != null)) {
                    this._задачаTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._задачаTableAdapter]));
                    this._задачаTableAdapter.Transaction = null;
                }
                if ((this._компанияTableAdapter != null)) {
                    this._компанияTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._компанияTableAdapter]));
                    this._компанияTableAdapter.Transaction = null;
                }
                if ((this._отзывыКомпанииTableAdapter != null)) {
                    this._отзывыКомпанииTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._отзывыКомпанииTableAdapter]));
                    this._отзывыКомпанииTableAdapter.Transaction = null;
                }
                if ((this._отзывыСтудентаTableAdapter != null)) {
                    this._отзывыСтудентаTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._отзывыСтудентаTableAdapter]));
                    this._отзывыСтудентаTableAdapter.Transaction = null;
                }
                if ((this._проблемаTableAdapter != null)) {
                    this._проблемаTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._проблемаTableAdapter]));
                    this._проблемаTableAdapter.Transaction = null;
                }
                if ((this._решениеЗадачиTableAdapter != null)) {
                    this._решениеЗадачиTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._решениеЗадачиTableAdapter]));
                    this._решениеЗадачиTableAdapter.Transaction = null;
                }
                if ((this._решениеПроблемыTableAdapter != null)) {
                    this._решениеПроблемыTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._решениеПроблемыTableAdapter]));
                    this._решениеПроблемыTableAdapter.Transaction = null;
                }
                if ((this._студентTableAdapter != null)) {
                    this._студентTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._студентTableAdapter]));
                    this._студентTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591